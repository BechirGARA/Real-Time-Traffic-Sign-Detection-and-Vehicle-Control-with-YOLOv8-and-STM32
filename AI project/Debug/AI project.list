
AI project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c4  080080c4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080cc  080080cc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080080d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001ca8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001da4  20001da4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000124e9  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003070  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  000356c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cbb  00000000  00000000  00036780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023464  00000000  00000000  0003743b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014b2b  00000000  00000000  0005a89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc73a  00000000  00000000  0006f3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045cc  00000000  00000000  0013bb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008038 	.word	0x08008038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008038 	.word	0x08008038

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <USBRxHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USBRxHandler(uint8_t* buf,uint16_t len) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	USBRxDataReady = 1;
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <USBRxHandler+0x2c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
	USBRxDataBuffer = buf ;
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <USBRxHandler+0x30>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6013      	str	r3, [r2, #0]
	USBRxDataLength = len;
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <USBRxHandler+0x34>)
 80004e2:	701a      	strb	r2, [r3, #0]
	return;
 80004e4:	bf00      	nop
}
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	200001a8 	.word	0x200001a8
 80004f4:	200001ac 	.word	0x200001ac
 80004f8:	200001b0 	.word	0x200001b0

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbe6 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f88c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa30 	bl	800096c <MX_GPIO_Init>
  MX_TIM1_Init();
 800050c:	f000 f8f2 	bl	80006f4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000510:	f006 ffe0 	bl	80074d4 <MX_USB_DEVICE_Init>
  MX_TIM8_Init();
 8000514:	f000 f99a 	bl	800084c <MX_TIM8_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4838      	ldr	r0, [pc, #224]	; (80005fc <main+0x100>)
 800051c:	f002 fe94 	bl	8003248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4837      	ldr	r0, [pc, #220]	; (8000600 <main+0x104>)
 8000524:	f002 fe90 	bl	8003248 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000528:	2104      	movs	r1, #4
 800052a:	4834      	ldr	r0, [pc, #208]	; (80005fc <main+0x100>)
 800052c:	f002 fe8c 	bl	8003248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4833      	ldr	r0, [pc, #204]	; (8000600 <main+0x104>)
 8000534:	f002 fe88 	bl	8003248 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (USBRxDataReady == 1)
 8000538:	4b32      	ldr	r3, [pc, #200]	; (8000604 <main+0x108>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d1fb      	bne.n	8000538 <main+0x3c>
	  {
		  if (strncmp(USBRxDataBuffer,"avant",USBRxDataLength) == 0)
 8000540:	4b31      	ldr	r3, [pc, #196]	; (8000608 <main+0x10c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a31      	ldr	r2, [pc, #196]	; (800060c <main+0x110>)
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	4931      	ldr	r1, [pc, #196]	; (8000610 <main+0x114>)
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fd3e 	bl	8007fcc <strncmp>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d122      	bne.n	800059c <main+0xa0>
		  {
			  	  	CDC_Transmit_FS("\ndone!\r\n", 8);
 8000556:	2108      	movs	r1, #8
 8000558:	482e      	ldr	r0, [pc, #184]	; (8000614 <main+0x118>)
 800055a:	f007 f8c5 	bl	80076e8 <CDC_Transmit_FS>
			  	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	482c      	ldr	r0, [pc, #176]	; (8000618 <main+0x11c>)
 8000566:	f000 fef7 	bl	8001358 <HAL_GPIO_WritePin>
			  	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	4829      	ldr	r0, [pc, #164]	; (8000618 <main+0x11c>)
 8000572:	f000 fef1 	bl	8001358 <HAL_GPIO_WritePin>
			  	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 800);
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <main+0x100>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
			  	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <main+0x100>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	639a      	str	r2, [r3, #56]	; 0x38
			  	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 900);
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x104>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
			  	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <main+0x104>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	639a      	str	r2, [r3, #56]	; 0x38
 800059a:	e02a      	b.n	80005f2 <main+0xf6>
		  }
		  else if (strncmp(USBRxDataBuffer,"stop",USBRxDataLength) == 0)
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <main+0x10c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <main+0x110>)
 80005a2:	7812      	ldrb	r2, [r2, #0]
 80005a4:	491d      	ldr	r1, [pc, #116]	; (800061c <main+0x120>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fd10 	bl	8007fcc <strncmp>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d11f      	bne.n	80005f2 <main+0xf6>
		  {
		  			CDC_Transmit_FS("\ndone!\r\n", 8);
 80005b2:	2108      	movs	r1, #8
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <main+0x118>)
 80005b6:	f007 f897 	bl	80076e8 <CDC_Transmit_FS>
		  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <main+0x11c>)
 80005c2:	f000 fec9 	bl	8001358 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x11c>)
 80005ce:	f000 fec3 	bl	8001358 <HAL_GPIO_WritePin>
		  			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x100>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
		  			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <main+0x100>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
		  			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <main+0x104>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
		  			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <main+0x104>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	639a      	str	r2, [r3, #56]	; 0x38
		  {

		  }

//		HAL_Delay(1000);
	  	USBRxDataReady = 0;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <main+0x108>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	  if (USBRxDataReady == 1)
 80005f8:	e79e      	b.n	8000538 <main+0x3c>
 80005fa:	bf00      	nop
 80005fc:	20000118 	.word	0x20000118
 8000600:	20000160 	.word	0x20000160
 8000604:	200001a8 	.word	0x200001a8
 8000608:	200001ac 	.word	0x200001ac
 800060c:	200001b0 	.word	0x200001b0
 8000610:	08008050 	.word	0x08008050
 8000614:	08008058 	.word	0x08008058
 8000618:	40020c00 	.word	0x40020c00
 800061c:	08008064 	.word	0x08008064

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fcc4 	bl	8007fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f8c0 	bl	800282c <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b2:	f000 f9c9 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2105      	movs	r1, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fb21 	bl	8002d1c <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e0:	f000 f9b2 	bl	8000a48 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2220      	movs	r2, #32
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f007 fc45 	bl	8007fbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_TIM1_Init+0x150>)
 8000734:	4a44      	ldr	r2, [pc, #272]	; (8000848 <MX_TIM1_Init+0x154>)
 8000736:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <MX_TIM1_Init+0x150>)
 800073a:	2253      	movs	r2, #83	; 0x53
 800073c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_TIM1_Init+0x150>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_TIM1_Init+0x150>)
 8000746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800074a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <MX_TIM1_Init+0x150>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000752:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <MX_TIM1_Init+0x150>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <MX_TIM1_Init+0x150>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800075e:	4839      	ldr	r0, [pc, #228]	; (8000844 <MX_TIM1_Init+0x150>)
 8000760:	f002 fcd4 	bl	800310c <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800076a:	f000 f96d 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000778:	4619      	mov	r1, r3
 800077a:	4832      	ldr	r0, [pc, #200]	; (8000844 <MX_TIM1_Init+0x150>)
 800077c:	f002 feee 	bl	800355c <HAL_TIM_ConfigClockSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000786:	f000 f95f 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078a:	482e      	ldr	r0, [pc, #184]	; (8000844 <MX_TIM1_Init+0x150>)
 800078c:	f002 fd0d 	bl	80031aa <HAL_TIM_PWM_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000796:	f000 f957 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a6:	4619      	mov	r1, r3
 80007a8:	4826      	ldr	r0, [pc, #152]	; (8000844 <MX_TIM1_Init+0x150>)
 80007aa:	f003 fabb 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007b4:	f000 f948 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <MX_TIM1_Init+0x150>)
 80007de:	f002 fdfb 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007e8:	f000 f92e 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2204      	movs	r2, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM1_Init+0x150>)
 80007f6:	f002 fdef 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000800:	f000 f922 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM1_Init+0x150>)
 8000828:	f003 faf8 	bl	8003e1c <HAL_TIMEx_ConfigBreakDeadTime>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000832:	f000 f909 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM1_Init+0x150>)
 8000838:	f000 f978 	bl	8000b2c <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000118 	.word	0x20000118
 8000848:	40010000 	.word	0x40010000

0800084c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b092      	sub	sp, #72	; 0x48
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fba0 	bl	8007fbc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <MX_TIM8_Init+0x118>)
 800087e:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <MX_TIM8_Init+0x11c>)
 8000880:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_TIM8_Init+0x118>)
 8000884:	2253      	movs	r2, #83	; 0x53
 8000886:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <MX_TIM8_Init+0x118>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_TIM8_Init+0x118>)
 8000890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000894:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <MX_TIM8_Init+0x118>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800089c:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_TIM8_Init+0x118>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_TIM8_Init+0x118>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008a8:	482e      	ldr	r0, [pc, #184]	; (8000964 <MX_TIM8_Init+0x118>)
 80008aa:	f002 fc7e 	bl	80031aa <HAL_TIM_PWM_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80008b4:	f000 f8c8 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008c4:	4619      	mov	r1, r3
 80008c6:	4827      	ldr	r0, [pc, #156]	; (8000964 <MX_TIM8_Init+0x118>)
 80008c8:	f003 fa2c 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80008d2:	f000 f8b9 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d6:	2360      	movs	r3, #96	; 0x60
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	; (8000964 <MX_TIM8_Init+0x118>)
 80008fc:	f002 fd6c 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000906:	f000 f89f 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2204      	movs	r2, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_TIM8_Init+0x118>)
 8000914:	f002 fd60 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800091e:	f000 f893 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM8_Init+0x118>)
 8000946:	f003 fa69 	bl	8003e1c <HAL_TIMEx_ConfigBreakDeadTime>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000950:	f000 f87a 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM8_Init+0x118>)
 8000956:	f000 f8e9 	bl	8000b2c <HAL_TIM_MspPostInit>

}
 800095a:	bf00      	nop
 800095c:	3748      	adds	r7, #72	; 0x48
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000160 	.word	0x20000160
 8000968:	40010400 	.word	0x40010400

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <MX_GPIO_Init+0xd4>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a16:	f000 fc9f 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a34:	f000 faf4 	bl	8001020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f000 fa82 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_TIM_Base_MspInit+0x40>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10d      	bne.n	8000b16 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_TIM_PWM_MspInit+0x40>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_TIM_PWM_MspInit+0x40>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_TIM_PWM_MspInit+0x40>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40010400 	.word	0x40010400
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <HAL_TIM_MspPostInit+0xb0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d11f      	bne.n	8000b8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000b6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4817      	ldr	r0, [pc, #92]	; (8000be4 <HAL_TIM_MspPostInit+0xb8>)
 8000b88:	f000 fa4a 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000b8c:	e022      	b.n	8000bd4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_TIM_MspPostInit+0xbc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d11d      	bne.n	8000bd4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_MspPostInit+0xb4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <HAL_TIM_MspPostInit+0xc0>)
 8000bd0:	f000 fa26 	bl	8001020 <HAL_GPIO_Init>
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010400 	.word	0x40010400
 8000bec:	40020800 	.word	0x40020800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f89a 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <OTG_FS_IRQHandler+0x10>)
 8000c4a:	f000 fce2 	bl	8001612 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200016a0 	.word	0x200016a0

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f007 f9a1 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc25 	bl	80004fc <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000cc0:	080080d4 	.word	0x080080d4
  ldr r2, =_sbss
 8000cc4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000cc8:	20001da4 	.word	0x20001da4

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f94f 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fea6 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f967 	bl	8001006 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f92f 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200001b4 	.word	0x200001b4

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200001b4 	.word	0x200001b4

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e16b      	b.n	8001314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 815a 	bne.w	800130e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d005      	beq.n	8001072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106e:	2b02      	cmp	r3, #2
 8001070:	d130      	bne.n	80010d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 0201 	and.w	r2, r3, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d017      	beq.n	8001110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80b4 	beq.w	800130e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a5f      	ldr	r2, [pc, #380]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c2:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x310>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_GPIO_Init+0x314>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x318>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x31c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x320>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_GPIO_Init+0x324>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x216>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x328>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x212>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x32c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_GPIO_Init+0x330>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20a>
 8001226:	2307      	movs	r3, #7
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122a:	2308      	movs	r3, #8
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122e:	2306      	movs	r3, #6
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x310>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f ae90 	bls.w	800103c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af02      	add	r7, sp, #8
 8001390:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e101      	b.n	80015a0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 fade 	bl	8007978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ca:	d102      	bne.n	80013d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fe89 	bl	80040ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7c1a      	ldrb	r2, [r3, #16]
 80013e4:	f88d 2000 	strb.w	r2, [sp]
 80013e8:	3304      	adds	r3, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	f002 fd68 	bl	8003ec0 <USB_CoreInit>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0ce      	b.n	80015a0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fe81 	bl	8004110 <USB_SetCurrentMode>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0bf      	b.n	80015a0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e04a      	b.n	80014bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3315      	adds	r3, #21
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3314      	adds	r3, #20
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	b298      	uxth	r0, r3
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	332e      	adds	r3, #46	; 0x2e
 8001462:	4602      	mov	r2, r0
 8001464:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3318      	adds	r3, #24
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	331c      	adds	r3, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3320      	adds	r3, #32
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3324      	adds	r3, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3af      	bcc.n	8001426 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e044      	b.n	8001556 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f203 2355 	addw	r3, r3, #597	; 0x255
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	3301      	adds	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	791b      	ldrb	r3, [r3, #4]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3b5      	bcc.n	80014cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7c1a      	ldrb	r2, [r3, #16]
 8001568:	f88d 2000 	strb.w	r2, [sp]
 800156c:	3304      	adds	r3, #4
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	f002 fe1a 	bl	80041a8 <USB_DevInit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00c      	b.n	80015a0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fe5e 	bl	800525a <USB_DevDisconnect>

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_PCD_Start+0x1c>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e022      	b.n	800160a <HAL_PCD_Start+0x62>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fd6b 	bl	80040cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fe0c 	bl	8005218 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b08d      	sub	sp, #52	; 0x34
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 feca 	bl	80053c2 <USB_GetMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 848c 	bne.w	8001f4e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fe2e 	bl	800529c <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8482 	beq.w	8001f4c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fe1b 	bl	800529c <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d107      	bne.n	8001680 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f002 0202 	and.w	r2, r2, #2
 800167e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fe09 	bl	800529c <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b10      	cmp	r3, #16
 8001692:	d161      	bne.n	8001758 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f003 020f 	and.w	r2, r3, #15
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	0c5b      	lsrs	r3, r3, #17
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d124      	bne.n	800171a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d035      	beq.n	8001748 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	6a38      	ldr	r0, [r7, #32]
 80016f0:	f003 fc40 	bl	8004f74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001700:	441a      	add	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001712:	441a      	add	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	e016      	b.n	8001748 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	0c5b      	lsrs	r3, r3, #17
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	2b06      	cmp	r3, #6
 8001724:	d110      	bne.n	8001748 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800172c:	2208      	movs	r2, #8
 800172e:	4619      	mov	r1, r3
 8001730:	6a38      	ldr	r0, [r7, #32]
 8001732:	f003 fc1f 	bl	8004f74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001742:	441a      	add	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0210 	orr.w	r2, r2, #16
 8001756:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fd9d 	bl	800529c <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001768:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800176c:	f040 80a7 	bne.w	80018be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fda2 	bl	80052c2 <USB_ReadDevAllOutEpInterrupt>
 800177e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001780:	e099      	b.n	80018b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 808e 	beq.w	80018aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fdc6 	bl	800532a <USB_ReadDevOutEPInterrupt>
 800179e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00c      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	461a      	mov	r2, r3
 80017b8:	2301      	movs	r3, #1
 80017ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fea2 	bl	8002508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017da:	461a      	mov	r2, r3
 80017dc:	2308      	movs	r3, #8
 80017de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 ff78 	bl	80026d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fe:	461a      	mov	r2, r3
 8001800:	2310      	movs	r3, #16
 8001802:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d030      	beq.n	8001870 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	2b80      	cmp	r3, #128	; 0x80
 8001818:	d109      	bne.n	800182e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2200      	movs	r2, #0
 8001850:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f006 f9a1 	bl	8007ba0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186a:	461a      	mov	r2, r3
 800186c:	2302      	movs	r3, #2
 800186e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001886:	461a      	mov	r2, r3
 8001888:	2320      	movs	r3, #32
 800188a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a2:	461a      	mov	r2, r3
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f af62 	bne.w	8001782 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fcea 	bl	800529c <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018d2:	f040 80db 	bne.w	8001a8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fd0b 	bl	80052f6 <USB_ReadDevAllInEpInterrupt>
 80018e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018e6:	e0cd      	b.n	8001a84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80c2 	beq.w	8001a78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fd31 	bl	8005366 <USB_ReadDevInEPInterrupt>
 8001904:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d057      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	2201      	movs	r2, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001930:	4013      	ands	r3, r2
 8001932:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001940:	461a      	mov	r2, r3
 8001942:	2301      	movs	r3, #1
 8001944:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	799b      	ldrb	r3, [r3, #6]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d132      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3320      	adds	r3, #32
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4403      	add	r3, r0
 800196e:	331c      	adds	r3, #28
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4419      	add	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4403      	add	r3, r0
 8001982:	3320      	adds	r3, #32
 8001984:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d113      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x3a2>
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	3324      	adds	r3, #36	; 0x24
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80019ac:	461a      	mov	r2, r3
 80019ae:	2101      	movs	r1, #1
 80019b0:	f003 fd38 	bl	8005424 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 f86b 	bl	8007a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d6:	461a      	mov	r2, r3
 80019d8:	2308      	movs	r3, #8
 80019da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f2:	461a      	mov	r2, r3
 80019f4:	2310      	movs	r3, #16
 80019f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2340      	movs	r3, #64	; 0x40
 8001a12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d023      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a20:	6a38      	ldr	r0, [r7, #32]
 8001a22:	f002 fd25 	bl	8004470 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	3310      	adds	r3, #16
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	3304      	adds	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	78db      	ldrb	r3, [r3, #3]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2200      	movs	r2, #0
 8001a46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f006 f8b8 	bl	8007bc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a60:	461a      	mov	r2, r3
 8001a62:	2302      	movs	r3, #2
 8001a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fcbb 	bl	80023ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f47f af2e 	bne.w	80018e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fc03 	bl	800529c <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aa0:	d122      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fea2 	bl	8002814 <HAL_PCDEx_LPM_Callback>
 8001ad0:	e002      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f006 f856 	bl	8007b84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fbd5 	bl	800529c <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001afc:	d112      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f006 f812 	bl	8007b38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b22:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fbb7 	bl	800529c <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	f040 80b7 	bne.w	8001caa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2110      	movs	r1, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fc8a 	bl	8004470 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b60:	e046      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	0151      	lsls	r1, r2, #5
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	440a      	add	r2, r1
 8001b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ba8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bba:	0151      	lsls	r1, r2, #5
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	440a      	add	r2, r1
 8001bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bda:	0151      	lsls	r1, r2, #5
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	440a      	add	r2, r1
 8001be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001be8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	3301      	adds	r3, #1
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d3b2      	bcc.n	8001b62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7bdb      	ldrb	r3, [r3, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f043 030b 	orr.w	r3, r3, #11
 8001c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3e:	f043 030b 	orr.w	r3, r3, #11
 8001c42:	6453      	str	r3, [r2, #68]	; 0x44
 8001c44:	e015      	b.n	8001c72 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c58:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c5c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6c:	f043 030b 	orr.w	r3, r3, #11
 8001c70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c94:	461a      	mov	r2, r3
 8001c96:	f003 fbc5 	bl	8005424 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 faf4 	bl	800529c <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbe:	d123      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fb8a 	bl	80053de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fc47 	bl	8004562 <USB_GetDevSpeed>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681c      	ldr	r4, [r3, #0]
 8001ce0:	f001 fa08 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cea:	461a      	mov	r2, r3
 8001cec:	4620      	mov	r0, r4
 8001cee:	f002 f94b 	bl	8003f88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 fef7 	bl	8007ae6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fac5 	bl	800529c <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d10a      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 fed4 	bl	8007aca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f002 0208 	and.w	r2, r2, #8
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fab0 	bl	800529c <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b80      	cmp	r3, #128	; 0x80
 8001d44:	d123      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e014      	b.n	8001d82 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fb08 	bl	800238c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3301      	adds	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	791b      	ldrb	r3, [r3, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d3e4      	bcc.n	8001d58 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fa82 	bl	800529c <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da2:	d13c      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	e02b      	b.n	8001e02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3318      	adds	r3, #24
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d115      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da12      	bge.n	8001dfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3317      	adds	r3, #23
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fac8 	bl	800238c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3301      	adds	r3, #1
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	461a      	mov	r2, r3
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d3cd      	bcc.n	8001daa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fa3a 	bl	800529c <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e32:	d156      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	e045      	b.n	8001ec6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12e      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da2b      	bge.n	8001ec0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001e74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d121      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebc:	6053      	str	r3, [r2, #4]
            break;
 8001ebe:	e008      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d3b3      	bcc.n	8001e3a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f9d8 	bl	800529c <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d10a      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f005 fe75 	bl	8007be8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 f9c2 	bl	800529c <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d115      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f005 fe65 	bl	8007c04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e000      	b.n	8001f4e <HAL_PCD_IRQHandler+0x93c>
      return;
 8001f4c:	bf00      	nop
    }
  }
}
 8001f4e:	3734      	adds	r7, #52	; 0x34
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_PCD_SetAddress+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e012      	b.n	8001f94 <HAL_PCD_SetAddress+0x40>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 f921 	bl	80051cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	803b      	strh	r3, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da0f      	bge.n	8001fe2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	705a      	strb	r2, [r3, #1]
 8001fe0:	e00f      	b.n	8002002 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800200e:	883a      	ldrh	r2, [r7, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	78ba      	ldrb	r2, [r7, #2]
 8002018:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800202c:	78bb      	ldrb	r3, [r7, #2]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d102      	bne.n	8002038 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_PCD_EP_Open+0xaa>
 8002042:	2302      	movs	r3, #2
 8002044:	e00e      	b.n	8002064 <HAL_PCD_EP_Open+0xc8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 faa9 	bl	80045ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002062:	7afb      	ldrb	r3, [r7, #11]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207c:	2b00      	cmp	r3, #0
 800207e:	da0f      	bge.n	80020a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3310      	adds	r3, #16
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
 800209e:	e00f      	b.n	80020c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	3304      	adds	r3, #4
 80020b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_PCD_EP_Close+0x6e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e00e      	b.n	80020f8 <HAL_PCD_EP_Close+0x8c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fae7 	bl	80046bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	460b      	mov	r3, r1
 800210e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	b2da      	uxtb	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	799b      	ldrb	r3, [r3, #6]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	799b      	ldrb	r3, [r3, #6]
 8002164:	461a      	mov	r2, r3
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	f002 fb84 	bl	8004874 <USB_EPStartXfer>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002198:	681b      	ldr	r3, [r3, #0]
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 020f 	and.w	r2, r3, #15
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3310      	adds	r3, #16
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2201      	movs	r2, #1
 80021e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	799b      	ldrb	r3, [r3, #6]
 8002208:	461a      	mov	r2, r3
 800220a:	6979      	ldr	r1, [r7, #20]
 800220c:	f002 fb32 	bl	8004874 <USB_EPStartXfer>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	7912      	ldrb	r2, [r2, #4]
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e04f      	b.n	80022d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0f      	bge.n	8002260 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	3310      	adds	r3, #16
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e00d      	b.n	800227c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	3304      	adds	r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_PCD_EP_SetStall+0x82>
 8002298:	2302      	movs	r3, #2
 800229a:	e01d      	b.n	80022d8 <HAL_PCD_EP_SetStall+0xbe>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 feba 	bl	8005024 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7999      	ldrb	r1, [r3, #6]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022c8:	461a      	mov	r2, r3
 80022ca:	f003 f8ab 	bl	8005424 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	7912      	ldrb	r2, [r2, #4]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e042      	b.n	8002384 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0f      	bge.n	8002326 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	3310      	adds	r3, #16
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	3304      	adds	r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	705a      	strb	r2, [r3, #1]
 8002324:	e00f      	b.n	8002346 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_PCD_EP_ClrStall+0x86>
 8002362:	2302      	movs	r3, #2
 8002364:	e00e      	b.n	8002384 <HAL_PCD_EP_ClrStall+0xa4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fec3 	bl	8005100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0c      	bge.n	80023ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	3310      	adds	r3, #16
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e00c      	b.n	80023d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 020f 	and.w	r2, r3, #15
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fce2 	bl	8004da4 <USB_EPStopXfer>
 80023e0:	4603      	mov	r3, r0
 80023e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023e4:	7afb      	ldrb	r3, [r7, #11]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	3310      	adds	r3, #16
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d901      	bls.n	8002426 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06b      	b.n	80024fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	429a      	cmp	r2, r3
 800243a:	d902      	bls.n	8002442 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3303      	adds	r3, #3
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244a:	e02a      	b.n	80024a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	429a      	cmp	r2, r3
 8002460:	d902      	bls.n	8002468 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3303      	adds	r3, #3
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4603      	mov	r3, r0
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f002 fd37 	bl	8004ef8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	441a      	add	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	441a      	add	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d809      	bhi.n	80024cc <PCD_WriteEmptyTxFifo+0xde>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d203      	bcs.n	80024cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1bf      	bne.n	800244c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d811      	bhi.n	80024fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024f8:	4013      	ands	r3, r2
 80024fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	333c      	adds	r3, #60	; 0x3c
 8002520:	3304      	adds	r3, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d17b      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4a61      	ldr	r2, [pc, #388]	; (80026d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	f240 80b9 	bls.w	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b3 	beq.w	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002570:	6093      	str	r3, [r2, #8]
 8002572:	e0a7      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258a:	461a      	mov	r2, r3
 800258c:	2320      	movs	r3, #32
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	e098      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 8093 	bne.w	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4a4b      	ldr	r2, [pc, #300]	; (80026d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d90f      	bls.n	80025c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025bc:	461a      	mov	r2, r3
 80025be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c2:	6093      	str	r3, [r2, #8]
 80025c4:	e07e      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	0159      	lsls	r1, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	1ad2      	subs	r2, r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d114      	bne.n	8002628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002610:	461a      	mov	r2, r3
 8002612:	2101      	movs	r1, #1
 8002614:	f002 ff06 	bl	8005424 <USB_EP0_OutStart>
 8002618:	e006      	b.n	8002628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	441a      	add	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f005 fa16 	bl	8007a60 <HAL_PCD_DataOutStageCallback>
 8002634:	e046      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d124      	bne.n	8002688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	e032      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002674:	461a      	mov	r2, r3
 8002676:	2320      	movs	r3, #32
 8002678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 f9ed 	bl	8007a60 <HAL_PCD_DataOutStageCallback>
 8002686:	e01d      	b.n	80026c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d114      	bne.n	80026b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80026b0:	461a      	mov	r2, r3
 80026b2:	2100      	movs	r1, #0
 80026b4:	f002 feb6 	bl	8005424 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f005 f9ce 	bl	8007a60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	4f54300a 	.word	0x4f54300a
 80026d4:	4f54310a 	.word	0x4f54310a

080026d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	3304      	adds	r3, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <PCD_EP_OutSetupPacket_int+0x88>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d90e      	bls.n	800272c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800272a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f005 f985 	bl	8007a3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <PCD_EP_OutSetupPacket_int+0x88>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d90c      	bls.n	8002754 <PCD_EP_OutSetupPacket_int+0x7c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	799b      	ldrb	r3, [r3, #6]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800274c:	461a      	mov	r2, r3
 800274e:	2101      	movs	r1, #1
 8002750:	f002 fe68 	bl	8005424 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	4f54300a 	.word	0x4f54300a

08002764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	4613      	mov	r3, r2
 8002772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002782:	883b      	ldrh	r3, [r7, #0]
 8002784:	0419      	lsls	r1, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	430a      	orrs	r2, r1
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
 8002790:	e028      	b.n	80027e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4413      	add	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e00d      	b.n	80027c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3340      	adds	r3, #64	; 0x40
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4413      	add	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3ec      	bcc.n	80027a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027cc:	883b      	ldrh	r3, [r7, #0]
 80027ce:	0418      	lsls	r0, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4302      	orrs	r2, r0
 80027dc:	3340      	adds	r3, #64	; 0x40
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e267      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d075      	beq.n	8002936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d00c      	beq.n	8002870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285e:	2b08      	cmp	r3, #8
 8002860:	d112      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002862:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05b      	beq.n	8002934 <HAL_RCC_OscConfig+0x108>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d157      	bne.n	8002934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e242      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x74>
 8002892:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a75      	ldr	r2, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x98>
 80028aa:	4b70      	ldr	r3, [pc, #448]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6f      	ldr	r2, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6c      	ldr	r2, [pc, #432]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xb0>
 80028c4:	4b69      	ldr	r3, [pc, #420]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a68      	ldr	r2, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fa5a 	bl	8000d9c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fa56 	bl	8000d9c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e207      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xc0>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fa46 	bl	8000d9c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fa42 	bl	8000d9c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1f3      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0xe8>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x152>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1c7      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x244>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe f9fb 	bl	8000d9c <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe f9f7 	bl	8000d9c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1a8      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_OscConfig+0x244>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe f9da 	bl	8000d9c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe f9d6 	bl	8000d9c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e187      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x248>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe f9ba 	bl	8000d9c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7fe f9b6 	bl	8000d9c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e167      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_OscConfig+0x240>)
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x200>
 8002a4a:	e01b      	b.n	8002a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x248>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe f9a3 	bl	8000d9c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	e00e      	b.n	8002a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fe f99f 	bl	8000d9c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d907      	bls.n	8002a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e150      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	42470000 	.word	0x42470000
 8002a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ea      	bne.n	8002a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8097 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b7d      	ldr	r3, [pc, #500]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a7c      	ldr	r2, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b77      	ldr	r3, [pc, #476]	; (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a73      	ldr	r2, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7fe f95f 	bl	8000d9c <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7fe f95b 	bl	8000d9c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e10c      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_OscConfig+0x474>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2ea>
 8002b08:	4b64      	ldr	r3, [pc, #400]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a63      	ldr	r2, [pc, #396]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	e01c      	b.n	8002b50 <HAL_RCC_OscConfig+0x324>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x30c>
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0x324>
 8002b38:	4b58      	ldr	r3, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a57      	ldr	r2, [pc, #348]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe f920 	bl	8000d9c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe f91c 	bl	8000d9c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0cb      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ee      	beq.n	8002b60 <HAL_RCC_OscConfig+0x334>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe f90a 	bl	8000d9c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f906 	bl	8000d9c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0b5      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ee      	bne.n	8002b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a38      	ldr	r2, [pc, #224]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a1 	beq.w	8002d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d05c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d141      	bne.n	8002c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe f8da 	bl	8000d9c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f8d6 	bl	8000d9c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e087      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	491b      	ldr	r1, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f8af 	bl	8000d9c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe f8ab 	bl	8000d9c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e05c      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x416>
 8002c60:	e054      	b.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x478>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe f898 	bl	8000d9c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe f894 	bl	8000d9c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e045      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_OscConfig+0x470>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x444>
 8002c8e:	e03d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e038      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4ec>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d121      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d11a      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cc      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d90c      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0b8      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d70:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	494d      	ldr	r1, [pc, #308]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d044      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e067      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fd ffc6 	bl	8000d9c <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fd ffc2 	bl	8000d9c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d20c      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e032      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4916      	ldr	r1, [pc, #88]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ea2:	f000 f821 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	490a      	ldr	r1, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	5ccb      	ldrb	r3, [r1, r3]
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ff26 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	080080b4 	.word	0x080080b4
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b094      	sub	sp, #80	; 0x50
 8002eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f00:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d00d      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	f200 80e1 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x34>
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f1a:	e0db      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f20:	e0db      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f26:	e0d8      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f28:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	2300      	movs	r3, #0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
 8002f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4621      	mov	r1, r4
 8002f74:	1a51      	subs	r1, r2, r1
 8002f76:	6139      	str	r1, [r7, #16]
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	018b      	lsls	r3, r1, #6
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f96:	4651      	mov	r1, sl
 8002f98:	018a      	lsls	r2, r1, #6
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fba:	4690      	mov	r8, r2
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb18 0303 	adds.w	r3, r8, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	eb49 0303 	adc.w	r3, r9, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	024b      	lsls	r3, r1, #9
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	024a      	lsls	r2, r1, #9
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	2200      	movs	r2, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff8:	f7fd f8e6 	bl	80001c8 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	e058      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	4618      	mov	r0, r3
 8003010:	4611      	mov	r1, r2
 8003012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003032:	0150      	lsls	r0, r2, #5
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4641      	mov	r1, r8
 800303a:	ebb2 0a01 	subs.w	sl, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb63 0b01 	sbc.w	fp, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003058:	ebb2 040a 	subs.w	r4, r2, sl
 800305c:	eb63 050b 	sbc.w	r5, r3, fp
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	00eb      	lsls	r3, r5, #3
 800306a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306e:	00e2      	lsls	r2, r4, #3
 8003070:	4614      	mov	r4, r2
 8003072:	461d      	mov	r5, r3
 8003074:	4643      	mov	r3, r8
 8003076:	18e3      	adds	r3, r4, r3
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	464b      	mov	r3, r9
 800307c:	eb45 0303 	adc.w	r3, r5, r3
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308e:	4629      	mov	r1, r5
 8003090:	028b      	lsls	r3, r1, #10
 8003092:	4621      	mov	r1, r4
 8003094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003098:	4621      	mov	r1, r4
 800309a:	028a      	lsls	r2, r1, #10
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a2:	2200      	movs	r2, #0
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	61fa      	str	r2, [r7, #28]
 80030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ac:	f7fd f88c 	bl	80001c8 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetSysClockFreq+0x204>)
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3750      	adds	r7, #80	; 0x50
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000

0800310c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e041      	b.n	80031a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fcb6 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 face 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e041      	b.n	8003240 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fd fc89 	bl	8000ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f000 fa7f 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_TIM_PWM_Start+0x24>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e022      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d109      	bne.n	8003286 <HAL_TIM_PWM_Start+0x3e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e015      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d109      	bne.n	80032a0 <HAL_TIM_PWM_Start+0x58>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e008      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07c      	b.n	80033b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0x82>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	e013      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0x92>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d8:	e00b      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	e003      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fcec 	bl	8003cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_TIM_PWM_Start+0x174>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIM_PWM_Start+0xcc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_TIM_PWM_Start+0x178>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_TIM_PWM_Start+0xd0>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_TIM_PWM_Start+0xd2>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_TIM_PWM_Start+0x174>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d01d      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_TIM_PWM_Start+0x17c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_TIM_PWM_Start+0x180>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIM_PWM_Start+0x184>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIM_PWM_Start+0x178>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_TIM_PWM_Start+0x188>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_PWM_Start+0x136>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIM_PWM_Start+0x18c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d010      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	e007      	b.n	80033b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800

080033d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0ae      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f200 809f 	bhi.w	8003544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003441 	.word	0x08003441
 8003410:	08003545 	.word	0x08003545
 8003414:	08003545 	.word	0x08003545
 8003418:	08003545 	.word	0x08003545
 800341c:	08003481 	.word	0x08003481
 8003420:	08003545 	.word	0x08003545
 8003424:	08003545 	.word	0x08003545
 8003428:	08003545 	.word	0x08003545
 800342c:	080034c3 	.word	0x080034c3
 8003430:	08003545 	.word	0x08003545
 8003434:	08003545 	.word	0x08003545
 8003438:	08003545 	.word	0x08003545
 800343c:	08003503 	.word	0x08003503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f9fc 	bl	8003844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6999      	ldr	r1, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	619a      	str	r2, [r3, #24]
      break;
 800347e:	e064      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fa4c 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e043      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 faa1 	bl	8003a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0204 	bic.w	r2, r2, #4
 80034ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]
      break;
 8003500:	e023      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 faf5 	bl	8003af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	61da      	str	r2, [r3, #28]
      break;
 8003542:	e002      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x1c>
 8003574:	2302      	movs	r3, #2
 8003576:	e0b4      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x186>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0xd4>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	f000 8086 	beq.w	80036ce <HAL_TIM_ConfigClockSource+0x172>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xa6>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x11a>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b50      	cmp	r3, #80	; 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0xfa>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x13a>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	f000 fb41 	bl	8003c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04f      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	f000 fb2a 	bl	8003c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fa9e 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	; 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 faf7 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003674:	e02c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003682:	461a      	mov	r2, r3
 8003684:	f000 fabd 	bl	8003c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	; 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fae7 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 8003694:	e01c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 fa7e 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fad7 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 face 	bl	8003c62 <TIM_ITRx_SetConfig>
      break;
 80036c6:	e003      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e000      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a46      	ldr	r2, [pc, #280]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a43      	ldr	r2, [pc, #268]	; (800381c <TIM_Base_SetConfig+0x130>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a42      	ldr	r2, [pc, #264]	; (8003820 <TIM_Base_SetConfig+0x134>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a41      	ldr	r2, [pc, #260]	; (8003824 <TIM_Base_SetConfig+0x138>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <TIM_Base_SetConfig+0x13c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a35      	ldr	r2, [pc, #212]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d027      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a32      	ldr	r2, [pc, #200]	; (800381c <TIM_Base_SetConfig+0x130>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d023      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a31      	ldr	r2, [pc, #196]	; (8003820 <TIM_Base_SetConfig+0x134>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a30      	ldr	r2, [pc, #192]	; (8003824 <TIM_Base_SetConfig+0x138>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <TIM_Base_SetConfig+0x13c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d017      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2e      	ldr	r2, [pc, #184]	; (800382c <TIM_Base_SetConfig+0x140>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <TIM_Base_SetConfig+0x144>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <TIM_Base_SetConfig+0x148>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <TIM_Base_SetConfig+0x14c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2a      	ldr	r2, [pc, #168]	; (800383c <TIM_Base_SetConfig+0x150>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <TIM_Base_SetConfig+0x154>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <TIM_Base_SetConfig+0x13c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
  }
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800
 8003838:	40001800 	.word	0x40001800
 800383c:	40001c00 	.word	0x40001c00
 8003840:	40002000 	.word	0x40002000

08003844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 0201 	bic.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 0302 	bic.w	r3, r3, #2
 800388c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a20      	ldr	r2, [pc, #128]	; (800391c <TIM_OC1_SetConfig+0xd8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC1_SetConfig+0x64>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <TIM_OC1_SetConfig+0xdc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10c      	bne.n	80038c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0308 	bic.w	r3, r3, #8
 80038ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <TIM_OC1_SetConfig+0xd8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC1_SetConfig+0x8e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <TIM_OC1_SetConfig+0xdc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <TIM_OC2_SetConfig+0xe4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC2_SetConfig+0x68>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <TIM_OC2_SetConfig+0xe8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10d      	bne.n	80039a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <TIM_OC2_SetConfig+0xe4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC2_SetConfig+0x94>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <TIM_OC2_SetConfig+0xe8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d113      	bne.n	80039e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40010400 	.word	0x40010400

08003a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <TIM_OC3_SetConfig+0xe0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC3_SetConfig+0x66>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <TIM_OC3_SetConfig+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10d      	bne.n	8003a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <TIM_OC3_SetConfig+0xe0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC3_SetConfig+0x92>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <TIM_OC3_SetConfig+0xe4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400

08003af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <TIM_OC4_SetConfig+0xa4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC4_SetConfig+0x68>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <TIM_OC4_SetConfig+0xa8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 0210 	bic.w	r2, r3, #16
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f043 0307 	orr.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e05a      	b.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d01d      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10c      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40010400 	.word	0x40010400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40001800 	.word	0x40001800

08003e1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e03d      	b.n	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	f107 001c 	add.w	r0, r7, #28
 8003ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ed2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d123      	bne.n	8003f22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 fae2 	bl	80054e0 <USB_CoreReset>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e01b      	b.n	8003f5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f001 fad6 	bl	80054e0 <USB_CoreReset>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f4c:	e005      	b.n	8003f5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f5a:	7fbb      	ldrb	r3, [r7, #30]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10b      	bne.n	8003f78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f043 0206 	orr.w	r2, r3, #6
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f84:	b004      	add	sp, #16
 8003f86:	4770      	bx	lr

08003f88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d165      	bne.n	8004068 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <USB_SetTurnaroundTime+0x11c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d906      	bls.n	8003fb2 <USB_SetTurnaroundTime+0x2a>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <USB_SetTurnaroundTime+0x120>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d202      	bcs.n	8003fb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fac:	230f      	movs	r3, #15
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e062      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <USB_SetTurnaroundTime+0x120>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d306      	bcc.n	8003fc8 <USB_SetTurnaroundTime+0x40>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a3b      	ldr	r2, [pc, #236]	; (80040ac <USB_SetTurnaroundTime+0x124>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d202      	bcs.n	8003fc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fc2:	230e      	movs	r3, #14
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e057      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a38      	ldr	r2, [pc, #224]	; (80040ac <USB_SetTurnaroundTime+0x124>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d306      	bcc.n	8003fde <USB_SetTurnaroundTime+0x56>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <USB_SetTurnaroundTime+0x128>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d202      	bcs.n	8003fde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fd8:	230d      	movs	r3, #13
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e04c      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <USB_SetTurnaroundTime+0x128>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d306      	bcc.n	8003ff4 <USB_SetTurnaroundTime+0x6c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <USB_SetTurnaroundTime+0x12c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d802      	bhi.n	8003ff4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fee:	230c      	movs	r3, #12
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e041      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <USB_SetTurnaroundTime+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d906      	bls.n	800400a <USB_SetTurnaroundTime+0x82>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <USB_SetTurnaroundTime+0x130>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d802      	bhi.n	800400a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004004:	230b      	movs	r3, #11
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e036      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <USB_SetTurnaroundTime+0x130>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d906      	bls.n	8004020 <USB_SetTurnaroundTime+0x98>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a29      	ldr	r2, [pc, #164]	; (80040bc <USB_SetTurnaroundTime+0x134>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800401a:	230a      	movs	r3, #10
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e02b      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a26      	ldr	r2, [pc, #152]	; (80040bc <USB_SetTurnaroundTime+0x134>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <USB_SetTurnaroundTime+0xae>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <USB_SetTurnaroundTime+0x138>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d202      	bcs.n	8004036 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004030:	2309      	movs	r3, #9
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e020      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <USB_SetTurnaroundTime+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d306      	bcc.n	800404c <USB_SetTurnaroundTime+0xc4>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <USB_SetTurnaroundTime+0x13c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004046:	2308      	movs	r3, #8
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e015      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <USB_SetTurnaroundTime+0x13c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d906      	bls.n	8004062 <USB_SetTurnaroundTime+0xda>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <USB_SetTurnaroundTime+0x140>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d202      	bcs.n	8004062 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800405c:	2307      	movs	r3, #7
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e00a      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004062:	2306      	movs	r3, #6
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e007      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800406e:	2309      	movs	r3, #9
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e001      	b.n	8004078 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004074:	2309      	movs	r3, #9
 8004076:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	00d8acbf 	.word	0x00d8acbf
 80040a8:	00e4e1c0 	.word	0x00e4e1c0
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	01067380 	.word	0x01067380
 80040b4:	011a499f 	.word	0x011a499f
 80040b8:	01312cff 	.word	0x01312cff
 80040bc:	014ca43f 	.word	0x014ca43f
 80040c0:	016e3600 	.word	0x016e3600
 80040c4:	01a6ab1f 	.word	0x01a6ab1f
 80040c8:	01e84800 	.word	0x01e84800

080040cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d115      	bne.n	800415e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800413e:	200a      	movs	r0, #10
 8004140:	f7fc fe38 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	330a      	adds	r3, #10
 8004148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f001 f939 	bl	80053c2 <USB_GetMode>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d01e      	beq.n	8004194 <USB_SetCurrentMode+0x84>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2bc7      	cmp	r3, #199	; 0xc7
 800415a:	d9f0      	bls.n	800413e <USB_SetCurrentMode+0x2e>
 800415c:	e01a      	b.n	8004194 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d115      	bne.n	8004190 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004170:	200a      	movs	r0, #10
 8004172:	f7fc fe1f 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	330a      	adds	r3, #10
 800417a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 f920 	bl	80053c2 <USB_GetMode>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USB_SetCurrentMode+0x84>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2bc7      	cmp	r3, #199	; 0xc7
 800418c:	d9f0      	bls.n	8004170 <USB_SetCurrentMode+0x60>
 800418e:	e001      	b.n	8004194 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e005      	b.n	80041a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2bc8      	cmp	r3, #200	; 0xc8
 8004198:	d101      	bne.n	800419e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e009      	b.n	80041dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3340      	adds	r3, #64	; 0x40
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3301      	adds	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0e      	cmp	r3, #14
 80041e0:	d9f2      	bls.n	80041c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11c      	bne.n	8004224 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
 8004222:	e00b      	b.n	800423c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004248:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10d      	bne.n	800426c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004258:	2100      	movs	r1, #0
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f968 	bl	8004530 <USB_SetDevSpeed>
 8004260:	e008      	b.n	8004274 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004262:	2101      	movs	r1, #1
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f963 	bl	8004530 <USB_SetDevSpeed>
 800426a:	e003      	b.n	8004274 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800426c:	2103      	movs	r1, #3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f95e 	bl	8004530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004274:	2110      	movs	r1, #16
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8fa 	bl	8004470 <USB_FlushTxFifo>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f924 	bl	80044d4 <USB_FlushRxFifo>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	e043      	b.n	8004348 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d6:	d118      	bne.n	800430a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	461a      	mov	r2, r3
 80042ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e013      	b.n	800431c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	461a      	mov	r2, r3
 8004302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e008      	b.n	800431c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	461a      	mov	r2, r3
 800432a:	2300      	movs	r3, #0
 800432c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	461a      	mov	r2, r3
 800433c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800434c:	461a      	mov	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4293      	cmp	r3, r2
 8004352:	d3b5      	bcc.n	80042c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e043      	b.n	80043e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004370:	d118      	bne.n	80043a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	461a      	mov	r2, r3
 8004386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e013      	b.n	80043b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	461a      	mov	r2, r3
 800439c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e008      	b.n	80043b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	461a      	mov	r2, r3
 80043d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3301      	adds	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043e6:	461a      	mov	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d3b5      	bcc.n	800435a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004400:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800440e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f043 0210 	orr.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <USB_DevInit+0x2c4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004430:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f043 0208 	orr.w	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004444:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800445c:	7dfb      	ldrb	r3, [r7, #23]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004468:	b004      	add	sp, #16
 800446a:	4770      	bx	lr
 800446c:	803c3800 	.word	0x803c3800

08004470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3301      	adds	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800448a:	d901      	bls.n	8004490 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e01b      	b.n	80044c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	daf2      	bge.n	800447e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	019b      	lsls	r3, r3, #6
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044b4:	d901      	bls.n	80044ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e006      	b.n	80044c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d0f0      	beq.n	80044a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044ec:	d901      	bls.n	80044f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e018      	b.n	8004524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	daf2      	bge.n	80044e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2210      	movs	r2, #16
 8004502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004510:	d901      	bls.n	8004516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e006      	b.n	8004524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d0f0      	beq.n	8004504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b480      	push	{r7}
 8004564:	b087      	sub	sp, #28
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0306 	and.w	r3, r3, #6
 800457a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
 8004586:	e00a      	b.n	800459e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d002      	beq.n	8004594 <USB_GetDevSpeed+0x32>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b06      	cmp	r3, #6
 8004592:	d102      	bne.n	800459a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004594:	2302      	movs	r3, #2
 8004596:	75fb      	strb	r3, [r7, #23]
 8004598:	e001      	b.n	800459e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800459a:	230f      	movs	r3, #15
 800459c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d13a      	bne.n	800463e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d155      	bne.n	80046ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	791b      	ldrb	r3, [r3, #4]
 800461a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800461c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	059b      	lsls	r3, r3, #22
 8004622:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004624:	4313      	orrs	r3, r2
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e036      	b.n	80046ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4313      	orrs	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11a      	bne.n	80046ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	791b      	ldrb	r3, [r3, #4]
 8004690:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004692:	430b      	orrs	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d161      	bne.n	800479c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ee:	d11f      	bne.n	8004730 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800470e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800472e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004750:	4013      	ands	r3, r2
 8004752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	b29b      	uxth	r3, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004774:	4013      	ands	r3, r2
 8004776:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0159      	lsls	r1, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	440b      	add	r3, r1
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	4619      	mov	r1, r3
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <USB_DeactivateEndpoint+0x1b0>)
 8004796:	4013      	ands	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
 800479a:	e060      	b.n	800485e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b2:	d11f      	bne.n	80047f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	43db      	mvns	r3, r3
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004814:	4013      	ands	r3, r2
 8004816:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	43db      	mvns	r3, r3
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004838:	4013      	ands	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	0159      	lsls	r1, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	440b      	add	r3, r1
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	4619      	mov	r1, r3
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <USB_DeactivateEndpoint+0x1b4>)
 800485a:	4013      	ands	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	ec337800 	.word	0xec337800
 8004870:	eff37800 	.word	0xeff37800

08004874 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 817a 	bne.w	8004b8a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d132      	bne.n	8004904 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	0cdb      	lsrs	r3, r3, #19
 80048fe:	04db      	lsls	r3, r3, #19
 8004900:	6113      	str	r3, [r2, #16]
 8004902:	e092      	b.n	8004a2a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	440a      	add	r2, r1
 800491a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491e:	0cdb      	lsrs	r3, r3, #19
 8004920:	04db      	lsls	r3, r3, #19
 8004922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004946:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11a      	bne.n	8004984 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d903      	bls.n	8004962 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	e01b      	b.n	80049bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6919      	ldr	r1, [r3, #16]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	440b      	add	r3, r1
 800499c:	1e59      	subs	r1, r3, #1
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049a8:	4ba2      	ldr	r3, [pc, #648]	; (8004c34 <USB_EPStartXfer+0x3c0>)
 80049aa:	400b      	ands	r3, r1
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	0148      	lsls	r0, r1, #5
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	4401      	add	r1, r0
 80049b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049b8:	4313      	orrs	r3, r2
 80049ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	0148      	lsls	r0, r1, #5
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	4401      	add	r1, r0
 80049da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d11f      	bne.n	8004a2a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d14b      	bne.n	8004ac8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d128      	bne.n	8004aa6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d110      	bne.n	8004a86 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e00f      	b.n	8004aa6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e165      	b.n	8004d94 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	791b      	ldrb	r3, [r3, #4]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d015      	beq.n	8004b1c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 814d 	beq.w	8004d94 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	69f9      	ldr	r1, [r7, #28]
 8004b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b16:	4313      	orrs	r3, r2
 8004b18:	634b      	str	r3, [r1, #52]	; 0x34
 8004b1a:	e13b      	b.n	8004d94 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d110      	bne.n	8004b4e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e00f      	b.n	8004b6e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68d9      	ldr	r1, [r3, #12]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	b298      	uxth	r0, r3
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f9b8 	bl	8004ef8 <USB_WritePacket>
 8004b88:	e104      	b.n	8004d94 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	0cdb      	lsrs	r3, r3, #19
 8004ba6:	04db      	lsls	r3, r3, #19
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bcc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d131      	bne.n	8004c38 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	0148      	lsls	r0, r1, #5
 8004c06:	69f9      	ldr	r1, [r7, #28]
 8004c08:	4401      	add	r1, r0
 8004c0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c30:	6113      	str	r3, [r2, #16]
 8004c32:	e061      	b.n	8004cf8 <USB_EPStartXfer+0x484>
 8004c34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d123      	bne.n	8004c88 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	69b9      	ldr	r1, [r7, #24]
 8004c58:	0148      	lsls	r0, r1, #5
 8004c5a:	69f9      	ldr	r1, [r7, #28]
 8004c5c:	4401      	add	r1, r0
 8004c5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c62:	4313      	orrs	r3, r2
 8004c64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c84:	6113      	str	r3, [r2, #16]
 8004c86:	e037      	b.n	8004cf8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	1e5a      	subs	r2, r3, #1
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	8afa      	ldrh	r2, [r7, #22]
 8004ca4:	fb03 f202 	mul.w	r2, r3, r2
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	04d9      	lsls	r1, r3, #19
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <USB_EPStartXfer+0x52c>)
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	69b9      	ldr	r1, [r7, #24]
 8004cc4:	0148      	lsls	r0, r1, #5
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	4401      	add	r1, r0
 8004cca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	0148      	lsls	r0, r1, #5
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	4401      	add	r1, r0
 8004cf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10d      	bne.n	8004d1a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	460a      	mov	r2, r1
 8004d18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	791b      	ldrb	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d128      	bne.n	8004d74 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d110      	bne.n	8004d54 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00f      	b.n	8004d74 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	1ff80000 	.word	0x1ff80000

08004da4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d14a      	bne.n	8004e58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dda:	f040 8086 	bne.w	8004eea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d902      	bls.n	8004e3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
          break;
 8004e3a:	e056      	b.n	8004eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e54:	d0e7      	beq.n	8004e26 <USB_EPStopXfer+0x82>
 8004e56:	e048      	b.n	8004eea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e70:	d13b      	bne.n	8004eea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d902      	bls.n	8004ed0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ece:	e00c      	b.n	8004eea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee8:	d0e7      	beq.n	8004eba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b089      	sub	sp, #36	; 0x24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	460b      	mov	r3, r1
 8004f08:	71fb      	strb	r3, [r7, #7]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d123      	bne.n	8004f66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f1e:	88bb      	ldrh	r3, [r7, #4]
 8004f20:	3303      	adds	r3, #3
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e018      	b.n	8004f5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	031a      	lsls	r2, r3, #12
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	461a      	mov	r2, r3
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3301      	adds	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3301      	adds	r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3e2      	bcc.n	8004f2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3724      	adds	r7, #36	; 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b08b      	sub	sp, #44	; 0x2c
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	e014      	b.n	8004fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	3301      	adds	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	3301      	adds	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3e6      	bcc.n	8004fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fd2:	8bfb      	ldrh	r3, [r7, #30]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01e      	beq.n	8005016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f107 0310 	add.w	r3, r7, #16
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	3301      	adds	r3, #1
 8005002:	623b      	str	r3, [r7, #32]
      pDest++;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	3301      	adds	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800500a:	8bfb      	ldrh	r3, [r7, #30]
 800500c:	3b01      	subs	r3, #1
 800500e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005010:	8bfb      	ldrh	r3, [r7, #30]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ea      	bne.n	8004fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005018:	4618      	mov	r0, r3
 800501a:	372c      	adds	r7, #44	; 0x2c
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d12c      	bne.n	800509a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	db12      	blt.n	8005078 <USB_EPSetStall+0x54>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005076:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e02b      	b.n	80050f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	db12      	blt.n	80050d2 <USB_EPSetStall+0xae>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00f      	beq.n	80050d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d128      	bne.n	800516e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800513a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	791b      	ldrb	r3, [r3, #4]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d003      	beq.n	800514c <USB_EPClearStall+0x4c>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d138      	bne.n	80051be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e027      	b.n	80051be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800518c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	791b      	ldrb	r3, [r3, #4]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d003      	beq.n	800519e <USB_EPClearStall+0x9e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d10f      	bne.n	80051be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005246:	f023 0302 	bic.w	r3, r3, #2
 800524a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005274:	f023 0303 	bic.w	r3, r3, #3
 8005278:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	0c1b      	lsrs	r3, r3, #16
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	b29b      	uxth	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005358:	68bb      	ldr	r3, [r7, #8]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	01db      	lsls	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053b4:	68bb      	ldr	r3, [r7, #8]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0301 	and.w	r3, r3, #1
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	460b      	mov	r3, r1
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	333c      	adds	r3, #60	; 0x3c
 800543a:	3304      	adds	r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4a26      	ldr	r2, [pc, #152]	; (80054dc <USB_EP0_OutStart+0xb8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d90a      	bls.n	800545e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005458:	d101      	bne.n	800545e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e037      	b.n	80054ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	461a      	mov	r2, r3
 8005466:	2300      	movs	r3, #0
 8005468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800547c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	f043 0318 	orr.w	r3, r3, #24
 8005490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054a6:	7afb      	ldrb	r3, [r7, #11]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10f      	bne.n	80054cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	461a      	mov	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	4f54300a 	.word	0x4f54300a

080054e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054f8:	d901      	bls.n	80054fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e01b      	b.n	8005536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	daf2      	bge.n	80054ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005522:	d901      	bls.n	8005528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e006      	b.n	8005536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d0f0      	beq.n	8005516 <USB_CoreReset+0x36>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005550:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005554:	f002 fcee 	bl	8007f34 <USBD_static_malloc>
 8005558:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32b0      	adds	r2, #176	; 0xb0
 800556a:	2100      	movs	r1, #0
 800556c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005570:	2302      	movs	r3, #2
 8005572:	e0d4      	b.n	800571e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005574:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005578:	2100      	movs	r1, #0
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f002 fd1e 	bl	8007fbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	32b0      	adds	r2, #176	; 0xb0
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32b0      	adds	r2, #176	; 0xb0
 800559a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7c1b      	ldrb	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d138      	bne.n	800561e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055ac:	4b5e      	ldr	r3, [pc, #376]	; (8005728 <USBD_CDC_Init+0x1e4>)
 80055ae:	7819      	ldrb	r1, [r3, #0]
 80055b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b4:	2202      	movs	r2, #2
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f002 fb99 	bl	8007cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055bc:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <USBD_CDC_Init+0x1e4>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	3324      	adds	r3, #36	; 0x24
 80055d2:	2201      	movs	r2, #1
 80055d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055d6:	4b55      	ldr	r3, [pc, #340]	; (800572c <USBD_CDC_Init+0x1e8>)
 80055d8:	7819      	ldrb	r1, [r3, #0]
 80055da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055de:	2202      	movs	r2, #2
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f002 fb84 	bl	8007cee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055e6:	4b51      	ldr	r3, [pc, #324]	; (800572c <USBD_CDC_Init+0x1e8>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f003 020f 	and.w	r2, r3, #15
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055fe:	2201      	movs	r2, #1
 8005600:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005602:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <USBD_CDC_Init+0x1ec>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f003 020f 	and.w	r2, r3, #15
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3326      	adds	r3, #38	; 0x26
 8005618:	2210      	movs	r2, #16
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e035      	b.n	800568a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800561e:	4b42      	ldr	r3, [pc, #264]	; (8005728 <USBD_CDC_Init+0x1e4>)
 8005620:	7819      	ldrb	r1, [r3, #0]
 8005622:	2340      	movs	r3, #64	; 0x40
 8005624:	2202      	movs	r2, #2
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f002 fb61 	bl	8007cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800562c:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <USBD_CDC_Init+0x1e4>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 020f 	and.w	r2, r3, #15
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3324      	adds	r3, #36	; 0x24
 8005642:	2201      	movs	r2, #1
 8005644:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <USBD_CDC_Init+0x1e8>)
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	2340      	movs	r3, #64	; 0x40
 800564c:	2202      	movs	r2, #2
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 fb4d 	bl	8007cee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <USBD_CDC_Init+0x1e8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800566c:	2201      	movs	r2, #1
 800566e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <USBD_CDC_Init+0x1ec>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 020f 	and.w	r2, r3, #15
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3326      	adds	r3, #38	; 0x26
 8005686:	2210      	movs	r2, #16
 8005688:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <USBD_CDC_Init+0x1ec>)
 800568c:	7819      	ldrb	r1, [r3, #0]
 800568e:	2308      	movs	r3, #8
 8005690:	2203      	movs	r2, #3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f002 fb2b 	bl	8007cee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <USBD_CDC_Init+0x1ec>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3324      	adds	r3, #36	; 0x24
 80056ae:	2201      	movs	r2, #1
 80056b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	33b0      	adds	r3, #176	; 0xb0
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056e8:	2302      	movs	r3, #2
 80056ea:	e018      	b.n	800571e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7c1b      	ldrb	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <USBD_CDC_Init+0x1e8>)
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f002 fbe2 	bl	8007ecc <USBD_LL_PrepareReceive>
 8005708:	e008      	b.n	800571c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <USBD_CDC_Init+0x1e8>)
 800570c:	7819      	ldrb	r1, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f002 fbd8 	bl	8007ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000093 	.word	0x20000093
 800572c:	20000094 	.word	0x20000094
 8005730:	20000095 	.word	0x20000095

08005734 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005740:	4b3a      	ldr	r3, [pc, #232]	; (800582c <USBD_CDC_DeInit+0xf8>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f002 faf7 	bl	8007d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800574c:	4b37      	ldr	r3, [pc, #220]	; (800582c <USBD_CDC_DeInit+0xf8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	2200      	movs	r2, #0
 8005764:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005766:	4b32      	ldr	r3, [pc, #200]	; (8005830 <USBD_CDC_DeInit+0xfc>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 fae4 	bl	8007d3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005772:	4b2f      	ldr	r3, [pc, #188]	; (8005830 <USBD_CDC_DeInit+0xfc>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800578a:	2200      	movs	r2, #0
 800578c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800578e:	4b29      	ldr	r3, [pc, #164]	; (8005834 <USBD_CDC_DeInit+0x100>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 fad0 	bl	8007d3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800579a:	4b26      	ldr	r3, [pc, #152]	; (8005834 <USBD_CDC_DeInit+0x100>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	2200      	movs	r2, #0
 80057b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80057b4:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <USBD_CDC_DeInit+0x100>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3326      	adds	r3, #38	; 0x26
 80057ca:	2200      	movs	r2, #0
 80057cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	32b0      	adds	r2, #176	; 0xb0
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01f      	beq.n	8005820 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	33b0      	adds	r3, #176	; 0xb0
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	32b0      	adds	r2, #176	; 0xb0
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	4618      	mov	r0, r3
 8005804:	f002 fba4 	bl	8007f50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	32b0      	adds	r2, #176	; 0xb0
 8005812:	2100      	movs	r1, #0
 8005814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000093 	.word	0x20000093
 8005830:	20000094 	.word	0x20000094
 8005834:	20000095 	.word	0x20000095

08005838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	32b0      	adds	r2, #176	; 0xb0
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005864:	2303      	movs	r3, #3
 8005866:	e0bf      	b.n	80059e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005870:	2b00      	cmp	r3, #0
 8005872:	d050      	beq.n	8005916 <USBD_CDC_Setup+0xde>
 8005874:	2b20      	cmp	r3, #32
 8005876:	f040 80af 	bne.w	80059d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03a      	beq.n	80058f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b25b      	sxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	da1b      	bge.n	80058c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	33b0      	adds	r3, #176	; 0xb0
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80058a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	88d2      	ldrh	r2, [r2, #6]
 80058a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	88db      	ldrh	r3, [r3, #6]
 80058ae:	2b07      	cmp	r3, #7
 80058b0:	bf28      	it	cs
 80058b2:	2307      	movcs	r3, #7
 80058b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	89fa      	ldrh	r2, [r7, #14]
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 fd89 	bl	80073d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80058c2:	e090      	b.n	80059e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785a      	ldrb	r2, [r3, #1]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	2b3f      	cmp	r3, #63	; 0x3f
 80058d4:	d803      	bhi.n	80058de <USBD_CDC_Setup+0xa6>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	88db      	ldrh	r3, [r3, #6]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	e000      	b.n	80058e0 <USBD_CDC_Setup+0xa8>
 80058de:	2240      	movs	r2, #64	; 0x40
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058e6:	6939      	ldr	r1, [r7, #16]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058ee:	461a      	mov	r2, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fd9b 	bl	800742c <USBD_CtlPrepareRx>
      break;
 80058f6:	e076      	b.n	80059e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	33b0      	adds	r3, #176	; 0xb0
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	7850      	ldrb	r0, [r2, #1]
 800590e:	2200      	movs	r2, #0
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	4798      	blx	r3
      break;
 8005914:	e067      	b.n	80059e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b0b      	cmp	r3, #11
 800591c:	d851      	bhi.n	80059c2 <USBD_CDC_Setup+0x18a>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <USBD_CDC_Setup+0xec>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005955 	.word	0x08005955
 8005928:	080059d1 	.word	0x080059d1
 800592c:	080059c3 	.word	0x080059c3
 8005930:	080059c3 	.word	0x080059c3
 8005934:	080059c3 	.word	0x080059c3
 8005938:	080059c3 	.word	0x080059c3
 800593c:	080059c3 	.word	0x080059c3
 8005940:	080059c3 	.word	0x080059c3
 8005944:	080059c3 	.word	0x080059c3
 8005948:	080059c3 	.word	0x080059c3
 800594c:	0800597f 	.word	0x0800597f
 8005950:	080059a9 	.word	0x080059a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d107      	bne.n	8005970 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005960:	f107 030a 	add.w	r3, r7, #10
 8005964:	2202      	movs	r2, #2
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fd33 	bl	80073d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800596e:	e032      	b.n	80059d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fcbd 	bl	80072f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	75fb      	strb	r3, [r7, #23]
          break;
 800597c:	e02b      	b.n	80059d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800598a:	f107 030d 	add.w	r3, r7, #13
 800598e:	2201      	movs	r2, #1
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 fd1e 	bl	80073d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005998:	e01d      	b.n	80059d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fca8 	bl	80072f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80059a2:	2303      	movs	r3, #3
 80059a4:	75fb      	strb	r3, [r7, #23]
          break;
 80059a6:	e016      	b.n	80059d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d00f      	beq.n	80059d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fc9b 	bl	80072f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059c0:	e008      	b.n	80059d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fc94 	bl	80072f2 <USBD_CtlError>
          ret = USBD_FAIL;
 80059ca:	2303      	movs	r3, #3
 80059cc:	75fb      	strb	r3, [r7, #23]
          break;
 80059ce:	e002      	b.n	80059d6 <USBD_CDC_Setup+0x19e>
          break;
 80059d0:	bf00      	nop
 80059d2:	e008      	b.n	80059e6 <USBD_CDC_Setup+0x1ae>
          break;
 80059d4:	bf00      	nop
      }
      break;
 80059d6:	e006      	b.n	80059e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 fc89 	bl	80072f2 <USBD_CtlError>
      ret = USBD_FAIL;
 80059e0:	2303      	movs	r3, #3
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005a02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	32b0      	adds	r2, #176	; 0xb0
 8005a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e065      	b.n	8005ae6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	32b0      	adds	r2, #176	; 0xb0
 8005a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3318      	adds	r3, #24
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 010f 	and.w	r1, r3, #15
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	460b      	mov	r3, r1
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4403      	add	r3, r0
 8005a6c:	331c      	adds	r3, #28
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d112      	bne.n	8005aa4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3318      	adds	r3, #24
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a96:	78f9      	ldrb	r1, [r7, #3]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f002 f9f4 	bl	8007e8a <USBD_LL_Transmit>
 8005aa2:	e01f      	b.n	8005ae4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	33b0      	adds	r3, #176	; 0xb0
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	33b0      	adds	r3, #176	; 0xb0
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	32b0      	adds	r2, #176	; 0xb0
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	32b0      	adds	r2, #176	; 0xb0
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e01a      	b.n	8005b56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f002 f9f2 	bl	8007f0e <USBD_LL_GetRxDataSize>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	33b0      	adds	r3, #176	; 0xb0
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b50:	4611      	mov	r1, r2
 8005b52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	32b0      	adds	r2, #176	; 0xb0
 8005b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e025      	b.n	8005bcc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	33b0      	adds	r3, #176	; 0xb0
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <USBD_CDC_EP0_RxReady+0x6c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d015      	beq.n	8005bca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	33b0      	adds	r3, #176	; 0xb0
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005bb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bdc:	2182      	movs	r1, #130	; 0x82
 8005bde:	4818      	ldr	r0, [pc, #96]	; (8005c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005be0:	f000 fd4f 	bl	8006682 <USBD_GetEpDesc>
 8005be4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005be6:	2101      	movs	r1, #1
 8005be8:	4815      	ldr	r0, [pc, #84]	; (8005c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bea:	f000 fd4a 	bl	8006682 <USBD_GetEpDesc>
 8005bee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bf0:	2181      	movs	r1, #129	; 0x81
 8005bf2:	4813      	ldr	r0, [pc, #76]	; (8005c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bf4:	f000 fd45 	bl	8006682 <USBD_GetEpDesc>
 8005bf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2210      	movs	r2, #16
 8005c04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d006      	beq.n	8005c1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c14:	711a      	strb	r2, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c28:	711a      	strb	r2, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2243      	movs	r2, #67	; 0x43
 8005c32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000050 	.word	0x20000050

08005c44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c4c:	2182      	movs	r1, #130	; 0x82
 8005c4e:	4818      	ldr	r0, [pc, #96]	; (8005cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c50:	f000 fd17 	bl	8006682 <USBD_GetEpDesc>
 8005c54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c56:	2101      	movs	r1, #1
 8005c58:	4815      	ldr	r0, [pc, #84]	; (8005cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c5a:	f000 fd12 	bl	8006682 <USBD_GetEpDesc>
 8005c5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c60:	2181      	movs	r1, #129	; 0x81
 8005c62:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c64:	f000 fd0d 	bl	8006682 <USBD_GetEpDesc>
 8005c68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2210      	movs	r2, #16
 8005c74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	711a      	strb	r2, [r3, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f042 0202 	orr.w	r2, r2, #2
 8005c88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	711a      	strb	r2, [r3, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f042 0202 	orr.w	r2, r2, #2
 8005c9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2243      	movs	r2, #67	; 0x43
 8005ca2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000050 	.word	0x20000050

08005cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cbc:	2182      	movs	r1, #130	; 0x82
 8005cbe:	4818      	ldr	r0, [pc, #96]	; (8005d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cc0:	f000 fcdf 	bl	8006682 <USBD_GetEpDesc>
 8005cc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4815      	ldr	r0, [pc, #84]	; (8005d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cca:	f000 fcda 	bl	8006682 <USBD_GetEpDesc>
 8005cce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cd0:	2181      	movs	r1, #129	; 0x81
 8005cd2:	4813      	ldr	r0, [pc, #76]	; (8005d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cd4:	f000 fcd5 	bl	8006682 <USBD_GetEpDesc>
 8005cd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf4:	711a      	strb	r2, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d08:	711a      	strb	r2, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2243      	movs	r2, #67	; 0x43
 8005d12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000050 	.word	0x20000050

08005d24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	220a      	movs	r2, #10
 8005d30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d32:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	2000000c 	.word	0x2000000c

08005d44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e009      	b.n	8005d6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	33b0      	adds	r3, #176	; 0xb0
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	32b0      	adds	r2, #176	; 0xb0
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e008      	b.n	8005db0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	32b0      	adds	r2, #176	; 0xb0
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e004      	b.n	8005dea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32b0      	adds	r2, #176	; 0xb0
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e025      	b.n	8005e6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11f      	bne.n	8005e68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <USBD_CDC_TransmitPacket+0x7c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4403      	add	r3, r0
 8005e4a:	3318      	adds	r3, #24
 8005e4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <USBD_CDC_TransmitPacket+0x7c>)
 8005e50:	7819      	ldrb	r1, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 f813 	bl	8007e8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000093 	.word	0x20000093

08005e78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	32b0      	adds	r2, #176	; 0xb0
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32b0      	adds	r2, #176	; 0xb0
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e018      	b.n	8005ed8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7c1b      	ldrb	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <USBD_CDC_ReceivePacket+0x68>)
 8005eb0:	7819      	ldrb	r1, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 f805 	bl	8007ecc <USBD_LL_PrepareReceive>
 8005ec2:	e008      	b.n	8005ed6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <USBD_CDC_ReceivePacket+0x68>)
 8005ec6:	7819      	ldrb	r1, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ece:	2340      	movs	r3, #64	; 0x40
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 fffb 	bl	8007ecc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000094 	.word	0x20000094

08005ee4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e01f      	b.n	8005f3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	79fa      	ldrb	r2, [r7, #7]
 8005f2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f001 fe75 	bl	8007c20 <USBD_LL_Init>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e025      	b.n	8005fa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	32ae      	adds	r2, #174	; 0xae
 8005f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00f      	beq.n	8005f98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	32ae      	adds	r2, #174	; 0xae
 8005f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f107 020e 	add.w	r2, r7, #14
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4602      	mov	r2, r0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 fe7d 	bl	8007cb8 <USBD_LL_Start>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	4611      	mov	r1, r2
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	4611      	mov	r1, r2
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800603c:	2303      	movs	r3, #3
 800603e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f90e 	bl	800727e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b02      	cmp	r3, #2
 8006084:	d01a      	beq.n	80060bc <USBD_LL_SetupStage+0x72>
 8006086:	2b02      	cmp	r3, #2
 8006088:	d822      	bhi.n	80060d0 <USBD_LL_SetupStage+0x86>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <USBD_LL_SetupStage+0x4a>
 800608e:	2b01      	cmp	r3, #1
 8006090:	d00a      	beq.n	80060a8 <USBD_LL_SetupStage+0x5e>
 8006092:	e01d      	b.n	80060d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fb65 	bl	800676c <USBD_StdDevReq>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
      break;
 80060a6:	e020      	b.n	80060ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbcd 	bl	8006850 <USBD_StdItfReq>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ba:	e016      	b.n	80060ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc2f 	bl	8006928 <USBD_StdEPReq>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73fb      	strb	r3, [r7, #15]
      break;
 80060ce:	e00c      	b.n	80060ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fe4a 	bl	8007d78 <USBD_LL_StallEP>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	bf00      	nop
  }

  return ret;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	460b      	mov	r3, r1
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d16e      	bne.n	80061ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006112:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800611a:	2b03      	cmp	r3, #3
 800611c:	f040 8098 	bne.w	8006250 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d913      	bls.n	8006154 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4293      	cmp	r3, r2
 8006144:	bf28      	it	cs
 8006146:	4613      	movcs	r3, r2
 8006148:	461a      	mov	r2, r3
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f001 f98a 	bl	8007466 <USBD_CtlContinueRx>
 8006152:	e07d      	b.n	8006250 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2b02      	cmp	r3, #2
 8006160:	d014      	beq.n	800618c <USBD_LL_DataOutStage+0x98>
 8006162:	2b02      	cmp	r3, #2
 8006164:	d81d      	bhi.n	80061a2 <USBD_LL_DataOutStage+0xae>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <USBD_LL_DataOutStage+0x7c>
 800616a:	2b01      	cmp	r3, #1
 800616c:	d003      	beq.n	8006176 <USBD_LL_DataOutStage+0x82>
 800616e:	e018      	b.n	80061a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	75bb      	strb	r3, [r7, #22]
            break;
 8006174:	e018      	b.n	80061a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fa64 	bl	800664e <USBD_CoreFindIF>
 8006186:	4603      	mov	r3, r0
 8006188:	75bb      	strb	r3, [r7, #22]
            break;
 800618a:	e00d      	b.n	80061a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006192:	b2db      	uxtb	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fa66 	bl	8006668 <USBD_CoreFindEP>
 800619c:	4603      	mov	r3, r0
 800619e:	75bb      	strb	r3, [r7, #22]
            break;
 80061a0:	e002      	b.n	80061a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75bb      	strb	r3, [r7, #22]
            break;
 80061a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061a8:	7dbb      	ldrb	r3, [r7, #22]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d119      	bne.n	80061e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d113      	bne.n	80061e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061ba:	7dba      	ldrb	r2, [r7, #22]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	32ae      	adds	r2, #174	; 0xae
 80061c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061ca:	7dba      	ldrb	r2, [r7, #22]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061d2:	7dba      	ldrb	r2, [r7, #22]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	32ae      	adds	r2, #174	; 0xae
 80061d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f001 f950 	bl	8007488 <USBD_CtlSendStatus>
 80061e8:	e032      	b.n	8006250 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fa37 	bl	8006668 <USBD_CoreFindEP>
 80061fa:	4603      	mov	r3, r0
 80061fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061fe:	7dbb      	ldrb	r3, [r7, #22]
 8006200:	2bff      	cmp	r3, #255	; 0xff
 8006202:	d025      	beq.n	8006250 <USBD_LL_DataOutStage+0x15c>
 8006204:	7dbb      	ldrb	r3, [r7, #22]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d122      	bne.n	8006250 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b03      	cmp	r3, #3
 8006214:	d117      	bne.n	8006246 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006216:	7dba      	ldrb	r2, [r7, #22]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	32ae      	adds	r2, #174	; 0xae
 800621c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006226:	7dba      	ldrb	r2, [r7, #22]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	32ae      	adds	r2, #174	; 0xae
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	7afa      	ldrb	r2, [r7, #11]
 800623c:	4611      	mov	r1, r2
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	4798      	blx	r3
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	e000      	b.n	8006252 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	460b      	mov	r3, r1
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d16f      	bne.n	800634e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3314      	adds	r3, #20
 8006272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800627a:	2b02      	cmp	r3, #2
 800627c:	d15a      	bne.n	8006334 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d914      	bls.n	80062b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	461a      	mov	r2, r3
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f001 f8b2 	bl	800740a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f001 fe0d 	bl	8007ecc <USBD_LL_PrepareReceive>
 80062b2:	e03f      	b.n	8006334 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d11c      	bne.n	80062fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d316      	bcc.n	80062fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d20f      	bcs.n	80062fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f001 f893 	bl	800740a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062ec:	2300      	movs	r3, #0
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f001 fdea 	bl	8007ecc <USBD_LL_PrepareReceive>
 80062f8:	e01c      	b.n	8006334 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d10f      	bne.n	8006326 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006326:	2180      	movs	r1, #128	; 0x80
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 fd25 	bl	8007d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f001 f8bd 	bl	80074ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d03a      	beq.n	80063b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff fe42 	bl	8005fc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800634c:	e032      	b.n	80063b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800634e:	7afb      	ldrb	r3, [r7, #11]
 8006350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006354:	b2db      	uxtb	r3, r3
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f985 	bl	8006668 <USBD_CoreFindEP>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	2bff      	cmp	r3, #255	; 0xff
 8006366:	d025      	beq.n	80063b4 <USBD_LL_DataInStage+0x15a>
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d122      	bne.n	80063b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d11c      	bne.n	80063b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800637a:	7dfa      	ldrb	r2, [r7, #23]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	32ae      	adds	r2, #174	; 0xae
 8006380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d014      	beq.n	80063b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800638a:	7dfa      	ldrb	r2, [r7, #23]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006392:	7dfa      	ldrb	r2, [r7, #23]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	32ae      	adds	r2, #174	; 0xae
 8006398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	7afa      	ldrb	r2, [r7, #11]
 80063a0:	4611      	mov	r1, r2
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	4798      	blx	r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063aa:	7dbb      	ldrb	r3, [r7, #22]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063b0:	7dbb      	ldrb	r3, [r7, #22]
 80063b2:	e000      	b.n	80063b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	4611      	mov	r1, r2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	2200      	movs	r2, #0
 8006428:	2100      	movs	r1, #0
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fc5f 	bl	8007cee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2240      	movs	r2, #64	; 0x40
 800643c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fc51 	bl	8007cee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	621a      	str	r2, [r3, #32]

  return ret;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b04      	cmp	r3, #4
 8006494:	d006      	beq.n	80064a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	b2da      	uxtb	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d106      	bne.n	80064dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d110      	bne.n	8006520 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	32ae      	adds	r2, #174	; 0xae
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006548:	2303      	movs	r3, #3
 800654a:	e01c      	b.n	8006586 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b03      	cmp	r3, #3
 8006556:	d115      	bne.n	8006584 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32ae      	adds	r2, #174	; 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	32ae      	adds	r2, #174	; 0xae
 8006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	78fa      	ldrb	r2, [r7, #3]
 800657e:	4611      	mov	r1, r2
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	32ae      	adds	r2, #174	; 0xae
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e01c      	b.n	80065ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d115      	bne.n	80065e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32ae      	adds	r2, #174	; 0xae
 80065c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32ae      	adds	r2, #174	; 0xae
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	4611      	mov	r1, r2
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00e      	beq.n	8006644 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6852      	ldr	r2, [r2, #4]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	4611      	mov	r1, r2
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800665a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006674:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	885b      	ldrh	r3, [r3, #2]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d920      	bls.n	80066ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066b2:	e013      	b.n	80066dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066b4:	f107 030a 	add.w	r3, r7, #10
 80066b8:	4619      	mov	r1, r3
 80066ba:	6978      	ldr	r0, [r7, #20]
 80066bc:	f000 f81b 	bl	80066f6 <USBD_GetNextDesc>
 80066c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d108      	bne.n	80066dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	789b      	ldrb	r3, [r3, #2]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d008      	beq.n	80066ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d8e5      	bhi.n	80066b4 <USBD_GetEpDesc+0x32>
 80066e8:	e000      	b.n	80066ec <USBD_GetEpDesc+0x6a>
          break;
 80066ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066ec:	693b      	ldr	r3, [r7, #16]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	881a      	ldrh	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	4413      	add	r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3301      	adds	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800674e:	8a3b      	ldrh	r3, [r7, #16]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	b21a      	sxth	r2, r3
 8006754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006758:	4313      	orrs	r3, r2
 800675a:	b21b      	sxth	r3, r3
 800675c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800675e:	89fb      	ldrh	r3, [r7, #14]
}
 8006760:	4618      	mov	r0, r3
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d005      	beq.n	8006792 <USBD_StdDevReq+0x26>
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d857      	bhi.n	800683a <USBD_StdDevReq+0xce>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00f      	beq.n	80067ae <USBD_StdDevReq+0x42>
 800678e:	2b20      	cmp	r3, #32
 8006790:	d153      	bne.n	800683a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	32ae      	adds	r2, #174	; 0xae
 800679c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
      break;
 80067ac:	e04a      	b.n	8006844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d83b      	bhi.n	800682e <USBD_StdDevReq+0xc2>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <USBD_StdDevReq+0x50>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	08006811 	.word	0x08006811
 80067c0:	08006825 	.word	0x08006825
 80067c4:	0800682f 	.word	0x0800682f
 80067c8:	0800681b 	.word	0x0800681b
 80067cc:	0800682f 	.word	0x0800682f
 80067d0:	080067ef 	.word	0x080067ef
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	0800682f 	.word	0x0800682f
 80067dc:	08006807 	.word	0x08006807
 80067e0:	080067f9 	.word	0x080067f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa3c 	bl	8006c64 <USBD_GetDescriptor>
          break;
 80067ec:	e024      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fba1 	bl	8006f38 <USBD_SetAddress>
          break;
 80067f6:	e01f      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fbe0 	bl	8006fc0 <USBD_SetConfig>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
          break;
 8006804:	e018      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc83 	bl	8007114 <USBD_GetConfig>
          break;
 800680e:	e013      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fcb4 	bl	8007180 <USBD_GetStatus>
          break;
 8006818:	e00e      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fce3 	bl	80071e8 <USBD_SetFeature>
          break;
 8006822:	e009      	b.n	8006838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fd07 	bl	800723a <USBD_ClrFeature>
          break;
 800682c:	e004      	b.n	8006838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fd5e 	bl	80072f2 <USBD_CtlError>
          break;
 8006836:	bf00      	nop
      }
      break;
 8006838:	e004      	b.n	8006844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd58 	bl	80072f2 <USBD_CtlError>
      break;
 8006842:	bf00      	nop
  }

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d005      	beq.n	8006876 <USBD_StdItfReq+0x26>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d852      	bhi.n	8006914 <USBD_StdItfReq+0xc4>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <USBD_StdItfReq+0x26>
 8006872:	2b20      	cmp	r3, #32
 8006874:	d14e      	bne.n	8006914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	2b02      	cmp	r3, #2
 8006882:	d840      	bhi.n	8006906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	889b      	ldrh	r3, [r3, #4]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d836      	bhi.n	80068fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	889b      	ldrh	r3, [r3, #4]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fed9 	bl	800664e <USBD_CoreFindIF>
 800689c:	4603      	mov	r3, r0
 800689e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2bff      	cmp	r3, #255	; 0xff
 80068a4:	d01d      	beq.n	80068e2 <USBD_StdItfReq+0x92>
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d11a      	bne.n	80068e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068ac:	7bba      	ldrb	r2, [r7, #14]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32ae      	adds	r2, #174	; 0xae
 80068b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00f      	beq.n	80068dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068bc:	7bba      	ldrb	r2, [r7, #14]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068c4:	7bba      	ldrb	r2, [r7, #14]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32ae      	adds	r2, #174	; 0xae
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068da:	e004      	b.n	80068e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068e0:	e001      	b.n	80068e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	88db      	ldrh	r3, [r3, #6]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d110      	bne.n	8006910 <USBD_StdItfReq+0xc0>
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fdc7 	bl	8007488 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068fa:	e009      	b.n	8006910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fcf7 	bl	80072f2 <USBD_CtlError>
          break;
 8006904:	e004      	b.n	8006910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcf2 	bl	80072f2 <USBD_CtlError>
          break;
 800690e:	e000      	b.n	8006912 <USBD_StdItfReq+0xc2>
          break;
 8006910:	bf00      	nop
      }
      break;
 8006912:	e004      	b.n	800691e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fceb 	bl	80072f2 <USBD_CtlError>
      break;
 800691c:	bf00      	nop
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	889b      	ldrh	r3, [r3, #4]
 800693a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d007      	beq.n	8006958 <USBD_StdEPReq+0x30>
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	f200 817f 	bhi.w	8006c4c <USBD_StdEPReq+0x324>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02a      	beq.n	80069a8 <USBD_StdEPReq+0x80>
 8006952:	2b20      	cmp	r3, #32
 8006954:	f040 817a 	bne.w	8006c4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fe83 	bl	8006668 <USBD_CoreFindEP>
 8006962:	4603      	mov	r3, r0
 8006964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006966:	7b7b      	ldrb	r3, [r7, #13]
 8006968:	2bff      	cmp	r3, #255	; 0xff
 800696a:	f000 8174 	beq.w	8006c56 <USBD_StdEPReq+0x32e>
 800696e:	7b7b      	ldrb	r3, [r7, #13]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8170 	bne.w	8006c56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006976:	7b7a      	ldrb	r2, [r7, #13]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800697e:	7b7a      	ldrb	r2, [r7, #13]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32ae      	adds	r2, #174	; 0xae
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8163 	beq.w	8006c56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006990:	7b7a      	ldrb	r2, [r7, #13]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	32ae      	adds	r2, #174	; 0xae
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069a6:	e156      	b.n	8006c56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d008      	beq.n	80069c2 <USBD_StdEPReq+0x9a>
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	f300 8145 	bgt.w	8006c40 <USBD_StdEPReq+0x318>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 809b 	beq.w	8006af2 <USBD_StdEPReq+0x1ca>
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d03c      	beq.n	8006a3a <USBD_StdEPReq+0x112>
 80069c0:	e13e      	b.n	8006c40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d002      	beq.n	80069d4 <USBD_StdEPReq+0xac>
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d016      	beq.n	8006a00 <USBD_StdEPReq+0xd8>
 80069d2:	e02c      	b.n	8006a2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <USBD_StdEPReq+0xce>
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d00a      	beq.n	80069f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f9c7 	bl	8007d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f9c3 	bl	8007d78 <USBD_LL_StallEP>
 80069f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f4:	e020      	b.n	8006a38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc7a 	bl	80072f2 <USBD_CtlError>
              break;
 80069fe:	e01b      	b.n	8006a38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10e      	bne.n	8006a26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <USBD_StdEPReq+0xfe>
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d008      	beq.n	8006a26 <USBD_StdEPReq+0xfe>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	88db      	ldrh	r3, [r3, #6]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f9a9 	bl	8007d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fd2e 	bl	8007488 <USBD_CtlSendStatus>

              break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fc5e 	bl	80072f2 <USBD_CtlError>
              break;
 8006a36:	bf00      	nop
          }
          break;
 8006a38:	e107      	b.n	8006c4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d002      	beq.n	8006a4c <USBD_StdEPReq+0x124>
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d016      	beq.n	8006a78 <USBD_StdEPReq+0x150>
 8006a4a:	e04b      	b.n	8006ae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <USBD_StdEPReq+0x146>
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b80      	cmp	r3, #128	; 0x80
 8006a56:	d00a      	beq.n	8006a6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f98b 	bl	8007d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f987 	bl	8007d78 <USBD_LL_StallEP>
 8006a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a6c:	e040      	b.n	8006af0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fc3e 	bl	80072f2 <USBD_CtlError>
              break;
 8006a76:	e03b      	b.n	8006af0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	885b      	ldrh	r3, [r3, #2]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d136      	bne.n	8006aee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 f991 	bl	8007db6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fcf7 	bl	8007488 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fde2 	bl	8006668 <USBD_CoreFindEP>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aa8:	7b7b      	ldrb	r3, [r7, #13]
 8006aaa:	2bff      	cmp	r3, #255	; 0xff
 8006aac:	d01f      	beq.n	8006aee <USBD_StdEPReq+0x1c6>
 8006aae:	7b7b      	ldrb	r3, [r7, #13]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11c      	bne.n	8006aee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ab4:	7b7a      	ldrb	r2, [r7, #13]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006abc:	7b7a      	ldrb	r2, [r7, #13]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32ae      	adds	r2, #174	; 0xae
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006acc:	7b7a      	ldrb	r2, [r7, #13]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	32ae      	adds	r2, #174	; 0xae
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ae2:	e004      	b.n	8006aee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fc03 	bl	80072f2 <USBD_CtlError>
              break;
 8006aec:	e000      	b.n	8006af0 <USBD_StdEPReq+0x1c8>
              break;
 8006aee:	bf00      	nop
          }
          break;
 8006af0:	e0ab      	b.n	8006c4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBD_StdEPReq+0x1dc>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d032      	beq.n	8006b68 <USBD_StdEPReq+0x240>
 8006b02:	e097      	b.n	8006c34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <USBD_StdEPReq+0x1f2>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d004      	beq.n	8006b1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fbed 	bl	80072f2 <USBD_CtlError>
                break;
 8006b18:	e091      	b.n	8006c3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da0b      	bge.n	8006b3a <USBD_StdEPReq+0x212>
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	3310      	adds	r3, #16
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	e00b      	b.n	8006b52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4413      	add	r3, r2
 8006b50:	3304      	adds	r3, #4
 8006b52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc37 	bl	80073d4 <USBD_CtlSendData>
              break;
 8006b66:	e06a      	b.n	8006c3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da11      	bge.n	8006b94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3324      	adds	r3, #36	; 0x24
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d117      	bne.n	8006bba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fbb0 	bl	80072f2 <USBD_CtlError>
                  break;
 8006b92:	e054      	b.n	8006c3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	f003 020f 	and.w	r2, r3, #15
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb9d 	bl	80072f2 <USBD_CtlError>
                  break;
 8006bb8:	e041      	b.n	8006c3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da0b      	bge.n	8006bda <USBD_StdEPReq+0x2b2>
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	3310      	adds	r3, #16
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	e00b      	b.n	8006bf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	4413      	add	r3, r2
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <USBD_StdEPReq+0x2d8>
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b80      	cmp	r3, #128	; 0x80
 8006bfe:	d103      	bne.n	8006c08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e00e      	b.n	8006c26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f8f1 	bl	8007df4 <USBD_LL_IsStallEP>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fbd1 	bl	80073d4 <USBD_CtlSendData>
              break;
 8006c32:	e004      	b.n	8006c3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb5b 	bl	80072f2 <USBD_CtlError>
              break;
 8006c3c:	bf00      	nop
          }
          break;
 8006c3e:	e004      	b.n	8006c4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fb55 	bl	80072f2 <USBD_CtlError>
          break;
 8006c48:	bf00      	nop
      }
      break;
 8006c4a:	e005      	b.n	8006c58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fb4f 	bl	80072f2 <USBD_CtlError>
      break;
 8006c54:	e000      	b.n	8006c58 <USBD_StdEPReq+0x330>
      break;
 8006c56:	bf00      	nop
  }

  return ret;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	f200 8128 	bhi.w	8006eda <USBD_GetDescriptor+0x276>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <USBD_GetDescriptor+0x2c>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cad 	.word	0x08006cad
 8006c94:	08006cc5 	.word	0x08006cc5
 8006c98:	08006d05 	.word	0x08006d05
 8006c9c:	08006edb 	.word	0x08006edb
 8006ca0:	08006edb 	.word	0x08006edb
 8006ca4:	08006e7b 	.word	0x08006e7b
 8006ca8:	08006ea7 	.word	0x08006ea7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
      break;
 8006cc2:	e112      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10d      	bne.n	8006ce8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f107 0208 	add.w	r2, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ce6:	e100      	b.n	8006eea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	2202      	movs	r2, #2
 8006d00:	701a      	strb	r2, [r3, #0]
      break;
 8006d02:	e0f2      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	f200 80ac 	bhi.w	8006e68 <USBD_GetDescriptor+0x204>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBD_GetDescriptor+0xb4>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d99 	.word	0x08006d99
 8006d24:	08006dcd 	.word	0x08006dcd
 8006d28:	08006e01 	.word	0x08006e01
 8006d2c:	08006e35 	.word	0x08006e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e091      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 facb 	bl	80072f2 <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e089      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e077      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fab1 	bl	80072f2 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e06f      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e05d      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa97 	bl	80072f2 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e055      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e043      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa7d 	bl	80072f2 <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e03b      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e22:	e029      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa63 	bl	80072f2 <USBD_CtlError>
            err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
          break;
 8006e32:	e021      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e56:	e00f      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa49 	bl	80072f2 <USBD_CtlError>
            err++;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	3301      	adds	r3, #1
 8006e64:	72fb      	strb	r3, [r7, #11]
          break;
 8006e66:	e007      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa41 	bl	80072f2 <USBD_CtlError>
          err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e76:	bf00      	nop
      }
      break;
 8006e78:	e037      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c1b      	ldrb	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e94:	e029      	b.n	8006eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa2a 	bl	80072f2 <USBD_CtlError>
        err++;
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea4:	e021      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	f107 0208 	add.w	r2, r7, #8
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4798      	blx	r3
 8006ebe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec8:	e00f      	b.n	8006eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa10 	bl	80072f2 <USBD_CtlError>
        err++;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed8:	e007      	b.n	8006eea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa08 	bl	80072f2 <USBD_CtlError>
      err++;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee8:	bf00      	nop
  }

  if (err != 0U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d11e      	bne.n	8006f2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	88db      	ldrh	r3, [r3, #6]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d016      	beq.n	8006f26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ef8:	893b      	ldrh	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00e      	beq.n	8006f1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	88da      	ldrh	r2, [r3, #6]
 8006f02:	893b      	ldrh	r3, [r7, #8]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	bf28      	it	cs
 8006f08:	4613      	movcs	r3, r2
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f0e:	893b      	ldrh	r3, [r7, #8]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa5d 	bl	80073d4 <USBD_CtlSendData>
 8006f1a:	e009      	b.n	8006f30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9e7 	bl	80072f2 <USBD_CtlError>
 8006f24:	e004      	b.n	8006f30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 faae 	bl	8007488 <USBD_CtlSendStatus>
 8006f2c:	e000      	b.n	8006f30 <USBD_GetDescriptor+0x2cc>
    return;
 8006f2e:	bf00      	nop
  }
}
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop

08006f38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	889b      	ldrh	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d131      	bne.n	8006fae <USBD_SetAddress+0x76>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d12d      	bne.n	8006fae <USBD_SetAddress+0x76>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	2b7f      	cmp	r3, #127	; 0x7f
 8006f58:	d829      	bhi.n	8006fae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d104      	bne.n	8006f7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9bc 	bl	80072f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	e01d      	b.n	8006fb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 ff5f 	bl	8007e4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa7a 	bl	8007488 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa2:	e009      	b.n	8006fb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fac:	e004      	b.n	8006fb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f99e 	bl	80072f2 <USBD_CtlError>
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	4b4e      	ldr	r3, [pc, #312]	; (8007110 <USBD_SetConfig+0x150>)
 8006fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fd8:	4b4d      	ldr	r3, [pc, #308]	; (8007110 <USBD_SetConfig+0x150>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d905      	bls.n	8006fec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f985 	bl	80072f2 <USBD_CtlError>
    return USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e08c      	b.n	8007106 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d002      	beq.n	8006ffe <USBD_SetConfig+0x3e>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d029      	beq.n	8007050 <USBD_SetConfig+0x90>
 8006ffc:	e075      	b.n	80070ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ffe:	4b44      	ldr	r3, [pc, #272]	; (8007110 <USBD_SetConfig+0x150>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d020      	beq.n	8007048 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007006:	4b42      	ldr	r3, [pc, #264]	; (8007110 <USBD_SetConfig+0x150>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007010:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <USBD_SetConfig+0x150>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fe ffe1 	bl	8005fde <USBD_SetClassConfig>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f962 	bl	80072f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007036:	e065      	b.n	8007104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa25 	bl	8007488 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2203      	movs	r2, #3
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007046:	e05d      	b.n	8007104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa1d 	bl	8007488 <USBD_CtlSendStatus>
      break;
 800704e:	e059      	b.n	8007104 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007050:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <USBD_SetConfig+0x150>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d112      	bne.n	800707e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007060:	4b2b      	ldr	r3, [pc, #172]	; (8007110 <USBD_SetConfig+0x150>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800706a:	4b29      	ldr	r3, [pc, #164]	; (8007110 <USBD_SetConfig+0x150>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fe ffd0 	bl	8006016 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa06 	bl	8007488 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800707c:	e042      	b.n	8007104 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <USBD_SetConfig+0x150>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d02a      	beq.n	80070e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fe ffbe 	bl	8006016 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <USBD_SetConfig+0x150>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <USBD_SetConfig+0x150>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fe ff97 	bl	8005fde <USBD_SetClassConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00f      	beq.n	80070da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f918 	bl	80072f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fe ffa3 	bl	8006016 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070d8:	e014      	b.n	8007104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9d4 	bl	8007488 <USBD_CtlSendStatus>
      break;
 80070e0:	e010      	b.n	8007104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f9d0 	bl	8007488 <USBD_CtlSendStatus>
      break;
 80070e8:	e00c      	b.n	8007104 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f900 	bl	80072f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f2:	4b07      	ldr	r3, [pc, #28]	; (8007110 <USBD_SetConfig+0x150>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7fe ff8c 	bl	8006016 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	73fb      	strb	r3, [r7, #15]
      break;
 8007102:	bf00      	nop
  }

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200001b8 	.word	0x200001b8

08007114 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	88db      	ldrh	r3, [r3, #6]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d004      	beq.n	8007130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8e2 	bl	80072f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800712e:	e023      	b.n	8007178 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	dc02      	bgt.n	8007142 <USBD_GetConfig+0x2e>
 800713c:	2b00      	cmp	r3, #0
 800713e:	dc03      	bgt.n	8007148 <USBD_GetConfig+0x34>
 8007140:	e015      	b.n	800716e <USBD_GetConfig+0x5a>
 8007142:	2b03      	cmp	r3, #3
 8007144:	d00b      	beq.n	800715e <USBD_GetConfig+0x4a>
 8007146:	e012      	b.n	800716e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3308      	adds	r3, #8
 8007152:	2201      	movs	r2, #1
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f93c 	bl	80073d4 <USBD_CtlSendData>
        break;
 800715c:	e00c      	b.n	8007178 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	2201      	movs	r2, #1
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f934 	bl	80073d4 <USBD_CtlSendData>
        break;
 800716c:	e004      	b.n	8007178 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f8be 	bl	80072f2 <USBD_CtlError>
        break;
 8007176:	bf00      	nop
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007190:	b2db      	uxtb	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	2b02      	cmp	r3, #2
 8007196:	d81e      	bhi.n	80071d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d004      	beq.n	80071aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8a5 	bl	80072f2 <USBD_CtlError>
        break;
 80071a8:	e01a      	b.n	80071e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f043 0202 	orr.w	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	330c      	adds	r3, #12
 80071ca:	2202      	movs	r2, #2
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f900 	bl	80073d4 <USBD_CtlSendData>
      break;
 80071d4:	e004      	b.n	80071e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f88a 	bl	80072f2 <USBD_CtlError>
      break;
 80071de:	bf00      	nop
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f940 	bl	8007488 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007208:	e013      	b.n	8007232 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	885b      	ldrh	r3, [r3, #2]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d10b      	bne.n	800722a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	889b      	ldrh	r3, [r3, #4]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	b2da      	uxtb	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f930 	bl	8007488 <USBD_CtlSendStatus>
}
 8007228:	e003      	b.n	8007232 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f860 	bl	80072f2 <USBD_CtlError>
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	2b02      	cmp	r3, #2
 8007250:	d80b      	bhi.n	800726a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10c      	bne.n	8007274 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f910 	bl	8007488 <USBD_CtlSendStatus>
      }
      break;
 8007268:	e004      	b.n	8007274 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f840 	bl	80072f2 <USBD_CtlError>
      break;
 8007272:	e000      	b.n	8007276 <USBD_ClrFeature+0x3c>
      break;
 8007274:	bf00      	nop
  }
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fa41 	bl	8006730 <SWAPBYTE>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff fa34 	bl	8006730 <SWAPBYTE>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fa27 	bl	8006730 <SWAPBYTE>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	80da      	strh	r2, [r3, #6]
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072fc:	2180      	movs	r1, #128	; 0x80
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fd3a 	bl	8007d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fd36 	bl	8007d78 <USBD_LL_StallEP>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d036      	beq.n	8007398 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800732e:	6938      	ldr	r0, [r7, #16]
 8007330:	f000 f836 	bl	80073a0 <USBD_GetLen>
 8007334:	4603      	mov	r3, r0
 8007336:	3301      	adds	r3, #1
 8007338:	b29b      	uxth	r3, r3
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	4413      	add	r3, r2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	701a      	strb	r2, [r3, #0]
  idx++;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	3301      	adds	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	2203      	movs	r2, #3
 800735c:	701a      	strb	r2, [r3, #0]
  idx++;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	3301      	adds	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007364:	e013      	b.n	800738e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4413      	add	r3, r2
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
    idx++;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	3301      	adds	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	4413      	add	r3, r2
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
    idx++;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	3301      	adds	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e7      	bne.n	8007366 <USBD_GetString+0x52>
 8007396:	e000      	b.n	800739a <USBD_GetString+0x86>
    return;
 8007398:	bf00      	nop
  }
}
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073b0:	e005      	b.n	80073be <USBD_GetLen+0x1e>
  {
    len++;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	3301      	adds	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f5      	bne.n	80073b2 <USBD_GetLen+0x12>
  }

  return len;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fd45 	bl	8007e8a <USBD_LL_Transmit>

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	2100      	movs	r1, #0
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fd34 	bl	8007e8a <USBD_LL_Transmit>

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2203      	movs	r2, #3
 800743c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	2100      	movs	r1, #0
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fd38 	bl	8007ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	2100      	movs	r1, #0
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fd27 	bl	8007ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2204      	movs	r2, #4
 8007494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007498:	2300      	movs	r3, #0
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fcf3 	bl	8007e8a <USBD_LL_Transmit>

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2205      	movs	r2, #5
 80074ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fd01 	bl	8007ecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074d8:	2200      	movs	r2, #0
 80074da:	4912      	ldr	r1, [pc, #72]	; (8007524 <MX_USB_DEVICE_Init+0x50>)
 80074dc:	4812      	ldr	r0, [pc, #72]	; (8007528 <MX_USB_DEVICE_Init+0x54>)
 80074de:	f7fe fd01 	bl	8005ee4 <USBD_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074e8:	f7f9 faae 	bl	8000a48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074ec:	490f      	ldr	r1, [pc, #60]	; (800752c <MX_USB_DEVICE_Init+0x58>)
 80074ee:	480e      	ldr	r0, [pc, #56]	; (8007528 <MX_USB_DEVICE_Init+0x54>)
 80074f0:	f7fe fd28 	bl	8005f44 <USBD_RegisterClass>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074fa:	f7f9 faa5 	bl	8000a48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074fe:	490c      	ldr	r1, [pc, #48]	; (8007530 <MX_USB_DEVICE_Init+0x5c>)
 8007500:	4809      	ldr	r0, [pc, #36]	; (8007528 <MX_USB_DEVICE_Init+0x54>)
 8007502:	f7fe fc1f 	bl	8005d44 <USBD_CDC_RegisterInterface>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800750c:	f7f9 fa9c 	bl	8000a48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007510:	4805      	ldr	r0, [pc, #20]	; (8007528 <MX_USB_DEVICE_Init+0x54>)
 8007512:	f7fe fd4d 	bl	8005fb0 <USBD_Start>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800751c:	f7f9 fa94 	bl	8000a48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007520:	bf00      	nop
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200000ac 	.word	0x200000ac
 8007528:	200001bc 	.word	0x200001bc
 800752c:	20000018 	.word	0x20000018
 8007530:	20000098 	.word	0x20000098

08007534 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007538:	2200      	movs	r2, #0
 800753a:	4905      	ldr	r1, [pc, #20]	; (8007550 <CDC_Init_FS+0x1c>)
 800753c:	4805      	ldr	r0, [pc, #20]	; (8007554 <CDC_Init_FS+0x20>)
 800753e:	f7fe fc1b 	bl	8005d78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007542:	4905      	ldr	r1, [pc, #20]	; (8007558 <CDC_Init_FS+0x24>)
 8007544:	4803      	ldr	r0, [pc, #12]	; (8007554 <CDC_Init_FS+0x20>)
 8007546:	f7fe fc39 	bl	8005dbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800754a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800754c:	4618      	mov	r0, r3
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000c98 	.word	0x20000c98
 8007554:	200001bc 	.word	0x200001bc
 8007558:	20000498 	.word	0x20000498

0800755c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007560:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007562:	4618      	mov	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
 8007578:	4613      	mov	r3, r2
 800757a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	2b23      	cmp	r3, #35	; 0x23
 8007580:	f200 808c 	bhi.w	800769c <CDC_Control_FS+0x130>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <CDC_Control_FS+0x20>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	0800769d 	.word	0x0800769d
 8007590:	0800769d 	.word	0x0800769d
 8007594:	0800769d 	.word	0x0800769d
 8007598:	0800769d 	.word	0x0800769d
 800759c:	0800769d 	.word	0x0800769d
 80075a0:	0800769d 	.word	0x0800769d
 80075a4:	0800769d 	.word	0x0800769d
 80075a8:	0800769d 	.word	0x0800769d
 80075ac:	0800769d 	.word	0x0800769d
 80075b0:	0800769d 	.word	0x0800769d
 80075b4:	0800769d 	.word	0x0800769d
 80075b8:	0800769d 	.word	0x0800769d
 80075bc:	0800769d 	.word	0x0800769d
 80075c0:	0800769d 	.word	0x0800769d
 80075c4:	0800769d 	.word	0x0800769d
 80075c8:	0800769d 	.word	0x0800769d
 80075cc:	0800769d 	.word	0x0800769d
 80075d0:	0800769d 	.word	0x0800769d
 80075d4:	0800769d 	.word	0x0800769d
 80075d8:	0800769d 	.word	0x0800769d
 80075dc:	0800769d 	.word	0x0800769d
 80075e0:	0800769d 	.word	0x0800769d
 80075e4:	0800769d 	.word	0x0800769d
 80075e8:	0800769d 	.word	0x0800769d
 80075ec:	0800769d 	.word	0x0800769d
 80075f0:	0800769d 	.word	0x0800769d
 80075f4:	0800769d 	.word	0x0800769d
 80075f8:	0800769d 	.word	0x0800769d
 80075fc:	0800769d 	.word	0x0800769d
 8007600:	0800769d 	.word	0x0800769d
 8007604:	0800769d 	.word	0x0800769d
 8007608:	0800769d 	.word	0x0800769d
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007657 	.word	0x08007657
 8007614:	0800769d 	.word	0x0800769d
 8007618:	0800769d 	.word	0x0800769d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	temp[0] = pbuf[0];
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	4b22      	ldr	r3, [pc, #136]	; (80076ac <CDC_Control_FS+0x140>)
 8007622:	701a      	strb	r2, [r3, #0]
    	temp[1] = pbuf[1];
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785a      	ldrb	r2, [r3, #1]
 8007628:	4b20      	ldr	r3, [pc, #128]	; (80076ac <CDC_Control_FS+0x140>)
 800762a:	705a      	strb	r2, [r3, #1]
    	temp[2] = pbuf[2];
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	789a      	ldrb	r2, [r3, #2]
 8007630:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <CDC_Control_FS+0x140>)
 8007632:	709a      	strb	r2, [r3, #2]
    	temp[3] = pbuf[3];
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	78da      	ldrb	r2, [r3, #3]
 8007638:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <CDC_Control_FS+0x140>)
 800763a:	70da      	strb	r2, [r3, #3]
    	temp[4] = pbuf[4];
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	791a      	ldrb	r2, [r3, #4]
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <CDC_Control_FS+0x140>)
 8007642:	711a      	strb	r2, [r3, #4]
    	temp[5] = pbuf[5];
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	795a      	ldrb	r2, [r3, #5]
 8007648:	4b18      	ldr	r3, [pc, #96]	; (80076ac <CDC_Control_FS+0x140>)
 800764a:	715a      	strb	r2, [r3, #5]
    	temp[6] = pbuf[6];
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	799a      	ldrb	r2, [r3, #6]
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <CDC_Control_FS+0x140>)
 8007652:	719a      	strb	r2, [r3, #6]
    break;
 8007654:	e023      	b.n	800769e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=temp[0];
 8007656:	4b15      	ldr	r3, [pc, #84]	; (80076ac <CDC_Control_FS+0x140>)
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=temp[1];
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a12      	ldr	r2, [pc, #72]	; (80076ac <CDC_Control_FS+0x140>)
 8007664:	7852      	ldrb	r2, [r2, #1]
 8007666:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=temp[2];
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	3302      	adds	r3, #2
 800766c:	4a0f      	ldr	r2, [pc, #60]	; (80076ac <CDC_Control_FS+0x140>)
 800766e:	7892      	ldrb	r2, [r2, #2]
 8007670:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=temp[3];
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	3303      	adds	r3, #3
 8007676:	4a0d      	ldr	r2, [pc, #52]	; (80076ac <CDC_Control_FS+0x140>)
 8007678:	78d2      	ldrb	r2, [r2, #3]
 800767a:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=temp[4];
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3304      	adds	r3, #4
 8007680:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <CDC_Control_FS+0x140>)
 8007682:	7912      	ldrb	r2, [r2, #4]
 8007684:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=temp[5];
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3305      	adds	r3, #5
 800768a:	4a08      	ldr	r2, [pc, #32]	; (80076ac <CDC_Control_FS+0x140>)
 800768c:	7952      	ldrb	r2, [r2, #5]
 800768e:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=temp[6];
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	3306      	adds	r3, #6
 8007694:	4a05      	ldr	r2, [pc, #20]	; (80076ac <CDC_Control_FS+0x140>)
 8007696:	7992      	ldrb	r2, [r2, #6]
 8007698:	701a      	strb	r2, [r3, #0]
    break;
 800769a:	e000      	b.n	800769e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800769c:	bf00      	nop
  }

  return (USBD_OK);
 800769e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20001498 	.word	0x20001498

080076b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4808      	ldr	r0, [pc, #32]	; (80076e0 <CDC_Receive_FS+0x30>)
 80076be:	f7fe fb7d 	bl	8005dbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076c2:	4807      	ldr	r0, [pc, #28]	; (80076e0 <CDC_Receive_FS+0x30>)
 80076c4:	f7fe fbd8 	bl	8005e78 <USBD_CDC_ReceivePacket>
  USBRxHandler(UserRxBufferFS,*Len);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	4804      	ldr	r0, [pc, #16]	; (80076e4 <CDC_Receive_FS+0x34>)
 80076d2:	f7f8 fef7 	bl	80004c4 <USBRxHandler>
  return (USBD_OK);
 80076d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	200001bc 	.word	0x200001bc
 80076e4:	20000498 	.word	0x20000498

080076e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <CDC_Transmit_FS+0x48>)
 80076fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800770a:	2301      	movs	r3, #1
 800770c:	e00b      	b.n	8007726 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	461a      	mov	r2, r3
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4806      	ldr	r0, [pc, #24]	; (8007730 <CDC_Transmit_FS+0x48>)
 8007716:	f7fe fb2f 	bl	8005d78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800771a:	4805      	ldr	r0, [pc, #20]	; (8007730 <CDC_Transmit_FS+0x48>)
 800771c:	f7fe fb6c 	bl	8005df8 <USBD_CDC_TransmitPacket>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200001bc 	.word	0x200001bc

08007734 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2212      	movs	r2, #18
 8007768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800776a:	4b03      	ldr	r3, [pc, #12]	; (8007778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	200000c8 	.word	0x200000c8

0800777c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2204      	movs	r2, #4
 800778c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800778e:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	200000dc 	.word	0x200000dc

080077a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4907      	ldr	r1, [pc, #28]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077b6:	4808      	ldr	r0, [pc, #32]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077b8:	f7ff fdac 	bl	8007314 <USBD_GetString>
 80077bc:	e004      	b.n	80077c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077c4:	f7ff fda6 	bl	8007314 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077c8:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200014a0 	.word	0x200014a0
 80077d8:	0800806c 	.word	0x0800806c

080077dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077ec:	4804      	ldr	r0, [pc, #16]	; (8007800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077ee:	f7ff fd91 	bl	8007314 <USBD_GetString>
  return USBD_StrDesc;
 80077f2:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	200014a0 	.word	0x200014a0
 8007800:	08008084 	.word	0x08008084

08007804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	221a      	movs	r2, #26
 8007814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007816:	f000 f843 	bl	80078a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800781a:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	200000e0 	.word	0x200000e0

08007828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d105      	bne.n	8007846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4907      	ldr	r1, [pc, #28]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800783e:	4808      	ldr	r0, [pc, #32]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007840:	f7ff fd68 	bl	8007314 <USBD_GetString>
 8007844:	e004      	b.n	8007850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4904      	ldr	r1, [pc, #16]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800784a:	4805      	ldr	r0, [pc, #20]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800784c:	f7ff fd62 	bl	8007314 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200014a0 	.word	0x200014a0
 8007860:	08008098 	.word	0x08008098

08007864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4907      	ldr	r1, [pc, #28]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800787a:	4808      	ldr	r0, [pc, #32]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800787c:	f7ff fd4a 	bl	8007314 <USBD_GetString>
 8007880:	e004      	b.n	800788c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007888:	f7ff fd44 	bl	8007314 <USBD_GetString>
  }
  return USBD_StrDesc;
 800788c:	4b02      	ldr	r3, [pc, #8]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	200014a0 	.word	0x200014a0
 800789c:	080080a4 	.word	0x080080a4

080078a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <Get_SerialNum+0x44>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <Get_SerialNum+0x48>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078b2:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <Get_SerialNum+0x4c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078c6:	2208      	movs	r2, #8
 80078c8:	4909      	ldr	r1, [pc, #36]	; (80078f0 <Get_SerialNum+0x50>)
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f814 	bl	80078f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078d0:	2204      	movs	r2, #4
 80078d2:	4908      	ldr	r1, [pc, #32]	; (80078f4 <Get_SerialNum+0x54>)
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f000 f80f 	bl	80078f8 <IntToUnicode>
  }
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	1fff7a10 	.word	0x1fff7a10
 80078e8:	1fff7a14 	.word	0x1fff7a14
 80078ec:	1fff7a18 	.word	0x1fff7a18
 80078f0:	200000e2 	.word	0x200000e2
 80078f4:	200000f2 	.word	0x200000f2

080078f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]
 800790e:	e027      	b.n	8007960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	0f1b      	lsrs	r3, r3, #28
 8007914:	2b09      	cmp	r3, #9
 8007916:	d80b      	bhi.n	8007930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0f1b      	lsrs	r3, r3, #28
 800791c:	b2da      	uxtb	r2, r3
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4619      	mov	r1, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	440b      	add	r3, r1
 8007928:	3230      	adds	r2, #48	; 0x30
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e00a      	b.n	8007946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0f1b      	lsrs	r3, r3, #28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4619      	mov	r1, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	440b      	add	r3, r1
 8007940:	3237      	adds	r2, #55	; 0x37
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	3301      	adds	r3, #1
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	3301      	adds	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
 8007960:	7dfa      	ldrb	r2, [r7, #23]
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3d3      	bcc.n	8007910 <IntToUnicode+0x18>
  }
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	; 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007998:	d147      	bne.n	8007a2a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	4a24      	ldr	r2, [pc, #144]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6313      	str	r3, [r2, #48]	; 0x30
 80079aa:	4b22      	ldr	r3, [pc, #136]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 80079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80079b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c4:	f107 0314 	add.w	r3, r7, #20
 80079c8:	4619      	mov	r1, r3
 80079ca:	481b      	ldr	r0, [pc, #108]	; (8007a38 <HAL_PCD_MspInit+0xc0>)
 80079cc:	f7f9 fb28 	bl	8001020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d6:	2302      	movs	r3, #2
 80079d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079de:	2303      	movs	r3, #3
 80079e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079e2:	230a      	movs	r3, #10
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	4619      	mov	r1, r3
 80079ec:	4812      	ldr	r0, [pc, #72]	; (8007a38 <HAL_PCD_MspInit+0xc0>)
 80079ee:	f7f9 fb17 	bl	8001020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	4a0f      	ldr	r2, [pc, #60]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	6353      	str	r3, [r2, #52]	; 0x34
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	4a0b      	ldr	r2, [pc, #44]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 8007a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <HAL_PCD_MspInit+0xbc>)
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2043      	movs	r0, #67	; 0x43
 8007a20:	f7f9 fac7 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a24:	2043      	movs	r0, #67	; 0x43
 8007a26:	f7f9 fae0 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	3728      	adds	r7, #40	; 0x28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40023800 	.word	0x40023800
 8007a38:	40020000 	.word	0x40020000

08007a3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f7fe faf9 	bl	800604a <USBD_LL_SetupStage>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f7fe fb33 	bl	80060f4 <USBD_LL_DataOutStage>
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe fbcc 	bl	800625a <USBD_LL_DataInStage>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fd06 	bl	80064ea <USBD_LL_SOF>
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007aee:	2301      	movs	r3, #1
 8007af0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	79db      	ldrb	r3, [r3, #7]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d102      	bne.n	8007b00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
 8007afe:	e008      	b.n	8007b12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	79db      	ldrb	r3, [r3, #7]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d102      	bne.n	8007b0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	e001      	b.n	8007b12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b0e:	f7f8 ff9b 	bl	8000a48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b18:	7bfa      	ldrb	r2, [r7, #15]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fca0 	bl	8006462 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fc48 	bl	80063be <USBD_LL_Reset>
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fc9b 	bl	8006482 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7adb      	ldrb	r3, [r3, #11]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <HAL_PCD_SuspendCallback+0x48>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	4a03      	ldr	r2, [pc, #12]	; (8007b80 <HAL_PCD_SuspendCallback+0x48>)
 8007b72:	f043 0306 	orr.w	r3, r3, #6
 8007b76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fc91 	bl	80064ba <USBD_LL_Resume>
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fce9 	bl	800658e <USBD_LL_IsoOUTIncomplete>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fca5 	bl	800652a <USBD_LL_IsoINIncomplete>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fcfb 	bl	80065f2 <USBD_LL_DevConnected>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fcf8 	bl	8006608 <USBD_LL_DevDisconnected>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d13c      	bne.n	8007caa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c30:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c40:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c48:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c4e:	4b19      	ldr	r3, [pc, #100]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c50:	2202      	movs	r2, #2
 8007c52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c54:	4b17      	ldr	r3, [pc, #92]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c5a:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c60:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007c72:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c78:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c7e:	480d      	ldr	r0, [pc, #52]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c80:	f7f9 fb83 	bl	800138a <HAL_PCD_Init>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c8a:	f7f8 fedd 	bl	8000a48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c92:	f7fa fdae 	bl	80027f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c96:	2240      	movs	r2, #64	; 0x40
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4806      	ldr	r0, [pc, #24]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007c9c:	f7fa fd62 	bl	8002764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ca0:	2280      	movs	r2, #128	; 0x80
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4803      	ldr	r0, [pc, #12]	; (8007cb4 <USBD_LL_Init+0x94>)
 8007ca6:	f7fa fd5d 	bl	8002764 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200016a0 	.word	0x200016a0

08007cb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7f9 fc6a 	bl	80015a8 <HAL_PCD_Start>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 f942 	bl	8007f64 <USBD_Get_USB_Status>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	70fb      	strb	r3, [r7, #3]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70bb      	strb	r3, [r7, #2]
 8007d04:	4613      	mov	r3, r2
 8007d06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d16:	78bb      	ldrb	r3, [r7, #2]
 8007d18:	883a      	ldrh	r2, [r7, #0]
 8007d1a:	78f9      	ldrb	r1, [r7, #3]
 8007d1c:	f7fa f93e 	bl	8001f9c <HAL_PCD_EP_Open>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f91c 	bl	8007f64 <USBD_Get_USB_Status>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fa f987 	bl	800206c <HAL_PCD_EP_Close>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f8fd 	bl	8007f64 <USBD_Get_USB_Status>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fa fa3f 	bl	800221a <HAL_PCD_EP_SetStall>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f8de 	bl	8007f64 <USBD_Get_USB_Status>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fa fa83 	bl	80022e0 <HAL_PCD_EP_ClrStall>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f8bf 	bl	8007f64 <USBD_Get_USB_Status>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da0b      	bge.n	8007e28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e16:	68f9      	ldr	r1, [r7, #12]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	3316      	adds	r3, #22
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	e00b      	b.n	8007e40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007e3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e66:	78fa      	ldrb	r2, [r7, #3]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fa f872 	bl	8001f54 <HAL_PCD_SetAddress>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f874 	bl	8007f64 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	460b      	mov	r3, r1
 8007e98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ea8:	7af9      	ldrb	r1, [r7, #11]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	f7fa f97a 	bl	80021a6 <HAL_PCD_EP_Transmit>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f853 	bl	8007f64 <USBD_Get_USB_Status>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ec2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007eea:	7af9      	ldrb	r1, [r7, #11]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f7fa f906 	bl	8002100 <HAL_PCD_EP_Receive>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f832 	bl	8007f64 <USBD_Get_USB_Status>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f04:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fa f926 	bl	8002176 <HAL_PCD_EP_GetRxCount>
 8007f2a:	4603      	mov	r3, r0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <USBD_static_malloc+0x18>)
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20001b84 	.word	0x20001b84

08007f50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d817      	bhi.n	8007fa8 <USBD_Get_USB_Status+0x44>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USBD_Get_USB_Status+0x1c>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007f97 	.word	0x08007f97
 8007f88:	08007f9d 	.word	0x08007f9d
 8007f8c:	08007fa3 	.word	0x08007fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
    break;
 8007f94:	e00b      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9a:	e008      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa0:	e005      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa6:	e002      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	bf00      	nop
  }
  return usb_status;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <memset>:
 8007fbc:	4402      	add	r2, r0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d100      	bne.n	8007fc6 <memset+0xa>
 8007fc4:	4770      	bx	lr
 8007fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fca:	e7f9      	b.n	8007fc0 <memset+0x4>

08007fcc <strncmp>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	b16a      	cbz	r2, 8007fec <strncmp+0x20>
 8007fd0:	3901      	subs	r1, #1
 8007fd2:	1884      	adds	r4, r0, r2
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <strncmp+0x1c>
 8007fe0:	42a0      	cmp	r0, r4
 8007fe2:	d001      	beq.n	8007fe8 <strncmp+0x1c>
 8007fe4:	2a00      	cmp	r2, #0
 8007fe6:	d1f5      	bne.n	8007fd4 <strncmp+0x8>
 8007fe8:	1ad0      	subs	r0, r2, r3
 8007fea:	bd10      	pop	{r4, pc}
 8007fec:	4610      	mov	r0, r2
 8007fee:	e7fc      	b.n	8007fea <strncmp+0x1e>

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4d0d      	ldr	r5, [pc, #52]	; (8008028 <__libc_init_array+0x38>)
 8007ff4:	4c0d      	ldr	r4, [pc, #52]	; (800802c <__libc_init_array+0x3c>)
 8007ff6:	1b64      	subs	r4, r4, r5
 8007ff8:	10a4      	asrs	r4, r4, #2
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	4d0b      	ldr	r5, [pc, #44]	; (8008030 <__libc_init_array+0x40>)
 8008002:	4c0c      	ldr	r4, [pc, #48]	; (8008034 <__libc_init_array+0x44>)
 8008004:	f000 f818 	bl	8008038 <_init>
 8008008:	1b64      	subs	r4, r4, r5
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	2600      	movs	r6, #0
 800800e:	42a6      	cmp	r6, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f855 3b04 	ldr.w	r3, [r5], #4
 8008018:	4798      	blx	r3
 800801a:	3601      	adds	r6, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008022:	4798      	blx	r3
 8008024:	3601      	adds	r6, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	080080cc 	.word	0x080080cc
 800802c:	080080cc 	.word	0x080080cc
 8008030:	080080cc 	.word	0x080080cc
 8008034:	080080d0 	.word	0x080080d0

08008038 <_init>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	bf00      	nop
 800803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803e:	bc08      	pop	{r3}
 8008040:	469e      	mov	lr, r3
 8008042:	4770      	bx	lr

08008044 <_fini>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr
